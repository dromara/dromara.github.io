import{_ as e}from"./MilvusPlus-0-a2d9d7ae.js";import{_ as i,o as r,c as l,f as n}from"./app-bb918e67.js";const a={},d=n('<h1 id="milvusplus-向量数据库增强操作库" tabindex="-1"><a class="header-anchor" href="#milvusplus-向量数据库增强操作库" aria-hidden="true">#</a> MilvusPlus：向量数据库增强操作库</h1><h2 id="项目简介" tabindex="-1"><a class="header-anchor" href="#项目简介" aria-hidden="true">#</a> 项目简介</h2><figure><img src="'+e+`" alt="" tabindex="0"><figcaption></figcaption></figure><p>MilvusPlus</p><blockquote><p>🔥🔥🔥MilvusPlus（简称 MP）是一个 Milvus 的操作工具，旨在简化与 Milvus 向量数据库的交互，为开发者提供类似 MyBatis-Plus 注解和方法调用风格的直观 API,提高效率而生。</p></blockquote><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li><p><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</p></li><li><p><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p></li><li><p><strong>强大的 CRUD 操作</strong>：通用 MilvusMapper，仅仅通过少量配置即可实现 CRUD 操作，更有强大的条件构造器，满足各类使用需求</p></li><li><p><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</p></li><li><p><strong>支持主键自动生成</strong>：完美解决主键问题</p></li><li><p><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入</p></li><li><p><strong>注解式配置</strong>：采用与 MyBatis-Plus 类似的注解方式配置实体模型。</p></li><li><p><strong>直观的 API</strong>：直接的 API 设计简化数据库操作。</p></li><li><p><strong>易于扩展</strong>：核心设计注重可扩展性。</p></li><li><p><strong>类型安全</strong>：利用 Java 类型安全减少错误。</p></li></ul><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><p>自定义扩展支持：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;io.github.javpower&lt;/groupId&gt;
    &lt;artifactId&gt;milvus-plus-core&lt;/artifactId&gt;
    &lt;version&gt;2.4.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring应用支持：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;io.github.javpower&lt;/groupId&gt;
    &lt;artifactId&gt;milvus-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;2.4.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Solon应用支持：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;io.github.javpower&lt;/groupId&gt;
    &lt;artifactId&gt;milvus-plus-solon-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>milvus:
  uri: https://in03-a5357975ab80da7.api.gcp-us-west1.zillizcloud.com
  token: x&#39;x&#39;x&#39;x
  enable: true
  packages:
    - io.github.javpower.milvus.demo.model
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>milvus</code>：定义了与Milvus服务相关的配置。</p></li><li><p><code>uri</code>：Milvus服务的URI，应用程序通过这个URI与Milvus服务进行通信。</p></li><li><p><code>token</code>：用于验证和授权的令牌（Token），确保访问Milvus服务的安全性。</p></li><li><p><code>enable</code>：一个布尔值，用于指示Milvus模块是否应该被启用。</p></li><li><p><code>packages</code>：这些包包含了自定义注解对应的Java类。</p></li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li><p><strong>相似性搜索</strong>：快速检索与给定向量最相似的项。</p></li><li><p><strong>推荐系统</strong>：根据用户行为和偏好推荐相关内容。</p></li><li><p><strong>图像检索</strong>：在大规模图像库中找到与查询图像最相似的图像。</p></li><li><p><strong>自然语言处理</strong>：将文本转换为向量并执行语义搜索。</p></li><li><p><strong>生物信息学</strong>：分析和比较生物序列，如蛋白质和基因组数据。</p></li></ul><h2 id="自定义注解详解" tabindex="-1"><a class="header-anchor" href="#自定义注解详解" aria-hidden="true">#</a> 自定义注解详解</h2><p>使用自定义注解自动化Milvus数据库集成，提供了以下显著优势：</p><ul><li><p><strong>简化开发流程</strong>：通过注解直接在代码中声明数据库结构，不用手动创建集合、属性、索引、分区，项目启动即自动构建，减少手动编写Milvus API调用的需要。</p></li><li><p><strong>提高开发效率</strong>：注解驱动的方式使得数据库结构的创建和管理更加快捷，加快开发速度。</p></li><li><p><strong>增强代码可读性</strong>：将数据库结构定义与业务逻辑代码紧密结合，提高代码的可读性和可维护性。</p></li><li><p><strong>减少错误</strong>：自动化创建数据库结构减少了人为错误的可能性，提高了系统的稳定性。</p></li><li><p><strong>易于维护</strong>：注解的使用使得数据库结构的变更更加集中和明确，便于后期维护和升级。</p></li></ul><h3 id="extraparam-注解" tabindex="-1"><a class="header-anchor" href="#extraparam-注解" aria-hidden="true">#</a> @ExtraParam 注解</h3><ul><li><p><strong>用途</strong>：定义索引或其他自定义功能的额外参数。</p></li><li><p><strong>属性</strong>：</p></li><li><p><code>key()</code>: 参数的键名。</p></li><li><p><code>value()</code>: 参数的值。</p></li></ul><h3 id="milvuscollection-注解" tabindex="-1"><a class="header-anchor" href="#milvuscollection-注解" aria-hidden="true">#</a> @MilvusCollection 注解</h3><ul><li><p><strong>用途</strong>：定义Milvus数据库中的集合。</p></li><li><p><strong>属性</strong>：</p></li><li><p><code>name()</code>: 集合的名称。</p></li></ul><h3 id="milvusfield-注解" tabindex="-1"><a class="header-anchor" href="#milvusfield-注解" aria-hidden="true">#</a> @MilvusField 注解</h3><ul><li><p><strong>用途</strong>：定义Milvus集合中的字段。</p></li><li><p><strong>属性</strong>：</p></li><li><p><code>name()</code>: 字段名称，默认为Java字段名。</p></li><li><p><code>dataType()</code>: 数据类型，默认为<code>FLOAT_VECTOR</code>。</p></li><li><p><code>dimension()</code>: 向量维度，默认为-1。</p></li><li><p><code>isPrimaryKey()</code>: 是否为主键，默认为false。</p></li><li><p><code>autoID()</code>: 是否自动生成ID，默认为false。</p></li><li><p><code>description()</code>: 字段描述，默认为空。</p></li><li><p><code>elementType()</code>: 元素类型，默认为<code>None</code>。</p></li><li><p><code>maxLength()</code>: 最大长度，默认为-1。</p></li><li><p><code>maxCapacity()</code>: 最大容量，默认为-1。</p></li><li><p><code>isPartitionKey()</code>: 是否为分区键，默认为false。</p></li></ul><h3 id="milvusindex-注解" tabindex="-1"><a class="header-anchor" href="#milvusindex-注解" aria-hidden="true">#</a> @MilvusIndex 注解</h3><ul><li><p><strong>用途</strong>：定义Milvus集合中的索引。</p></li><li><p><strong>属性</strong>：</p></li><li><p><code>indexType()</code>: 索引类型，默认为<code>FLAT</code>。</p></li><li><p><code>metricType()</code>: 度量类型，默认为<code>L2</code>。</p></li><li><p><code>indexName()</code>: 索引名称，默认为空。</p></li><li><p><code>extraParams()</code>: 额外参数，使用<code>ExtraParam</code>注解定义。</p></li></ul><h3 id="milvuspartition-注解" tabindex="-1"><a class="header-anchor" href="#milvuspartition-注解" aria-hidden="true">#</a> @MilvusPartition 注解</h3><ul><li><p><strong>用途</strong>：定义Milvus集合的分区。</p></li><li><p><strong>属性</strong>：</p></li><li><p><code>name()</code>: 分区的名称数组。</p></li></ul><p>通过这些注解，开发者可以轻松地定义和管理Milvus数据库的结构，实现项目启动时自动构建所需数据库结构的目标。</p><h2 id="crud模块介绍" tabindex="-1"><a class="header-anchor" href="#crud模块介绍" aria-hidden="true">#</a> CRUD模块介绍</h2><p>CRUD模块是应用程序中用于处理数据的基本操作集合，即创建(Create)、读取(Read)、更新(Update)和删除(Delete)。在本模块中，我们通过抽象类<code>BaseMilvusMapper&lt;T&gt;</code>封装了与Milvus数据库交互的CRUD操作，提供了一种类型安全且易于使用的接口。</p><h3 id="抽象类basemilvusmapper-t" tabindex="-1"><a class="header-anchor" href="#抽象类basemilvusmapper-t" aria-hidden="true">#</a> 抽象类<code>BaseMilvusMapper&lt;T&gt;</code></h3><p><code>BaseMilvusMapper&lt;T&gt;</code>是一个抽象类，它实现了<code>IAMService</code>接口，并定义了一系列用于操作Milvus数据库的方法。这个类是所有与Milvus数据库交互的Mapper类的基类。</p><h3 id="抽象方法getclient" tabindex="-1"><a class="header-anchor" href="#抽象方法getclient" aria-hidden="true">#</a> 抽象方法<code>getClient()</code></h3><ul><li><strong>功能</strong>：返回一个<code>MilvusClientV2</code>实例，用于与Milvus数据库进行通信。</li></ul><h3 id="方法querywrapper" tabindex="-1"><a class="header-anchor" href="#方法querywrapper" aria-hidden="true">#</a> 方法<code>queryWrapper()</code></h3><ul><li><strong>功能</strong>：创建并返回一个<code>LambdaQueryWrapper&lt;T&gt;</code>实例，用于构建查询操作。</li></ul><h3 id="方法deletewrapper" tabindex="-1"><a class="header-anchor" href="#方法deletewrapper" aria-hidden="true">#</a> 方法<code>deleteWrapper()</code></h3><ul><li><strong>功能</strong>：创建并返回一个<code>LambdaDeleteWrapper&lt;T&gt;</code>实例，用于构建删除操作。</li></ul><h3 id="方法updatewrapper" tabindex="-1"><a class="header-anchor" href="#方法updatewrapper" aria-hidden="true">#</a> 方法<code>updateWrapper()</code></h3><ul><li><strong>功能</strong>：创建并返回一个<code>LambdaUpdateWrapper&lt;T&gt;</code>实例，用于构建更新操作。</li></ul><h3 id="方法insertwrapper" tabindex="-1"><a class="header-anchor" href="#方法insertwrapper" aria-hidden="true">#</a> 方法<code>insertWrapper()</code></h3><ul><li><strong>功能</strong>：创建并返回一个<code>LambdaInsertWrapper&lt;T&gt;</code>实例，用于构建插入操作。</li></ul><h3 id="方法getbyid-serializable-ids" tabindex="-1"><a class="header-anchor" href="#方法getbyid-serializable-ids" aria-hidden="true">#</a> 方法<code>getById(Serializable ... ids)</code></h3><ul><li><p><strong>功能</strong>：根据提供的ID列表查询数据。</p></li><li><p><strong>参数</strong>：<code>ids</code> - 一个可序列化的ID列表。</p></li><li><p><strong>返回</strong>：<code>MilvusResp&lt;List&lt;MilvusResult&lt;T&gt;&gt;&gt;</code> - 包含查询结果的响应。</p></li></ul><h3 id="方法removebyid-serializable-ids" tabindex="-1"><a class="header-anchor" href="#方法removebyid-serializable-ids" aria-hidden="true">#</a> 方法<code>removeById(Serializable ... ids)</code></h3><ul><li><p><strong>功能</strong>：根据提供的ID列表删除数据。</p></li><li><p><strong>参数</strong>：<code>ids</code> - 一个可序列化的ID列表。</p></li><li><p><strong>返回</strong>：<code>MilvusResp&lt;DeleteResp&gt;</code> - 删除操作的响应。</p></li></ul><h3 id="方法updatebyid-t-entity" tabindex="-1"><a class="header-anchor" href="#方法updatebyid-t-entity" aria-hidden="true">#</a> 方法<code>updateById(T ... entity)</code></h3><ul><li><p><strong>功能</strong>：根据提供的实体更新数据。</p></li><li><p><strong>参数</strong>：<code>entity</code> - 一个实体对象列表。</p></li><li><p><strong>返回</strong>：<code>MilvusResp&lt;UpsertResp&gt;</code> - 更新操作的响应。</p></li></ul><h3 id="方法insert-t-entity" tabindex="-1"><a class="header-anchor" href="#方法insert-t-entity" aria-hidden="true">#</a> 方法<code>insert(T ... entity)</code></h3><ul><li><p><strong>功能</strong>：插入提供的实体到数据库。</p></li><li><p><strong>参数</strong>：<code>entity</code> - 一个实体对象列表。</p></li><li><p><strong>返回</strong>：<code>MilvusResp&lt;InsertResp&gt;</code> - 插入操作的响应。</p></li></ul><h3 id="方法lambda-wrapper-w-t-wrapper" tabindex="-1"><a class="header-anchor" href="#方法lambda-wrapper-w-t-wrapper" aria-hidden="true">#</a> 方法<code>lambda(Wrapper&lt;W, T&gt; wrapper)</code></h3><ul><li><p><strong>功能</strong>：创建一个通用的构建器实例，用于不同类型的操作。</p></li><li><p><strong>参数</strong>：<code>wrapper</code> - 一个构建器实例。</p></li><li><p><strong>返回</strong>：<code>W</code> - 返回构建器实例。</p></li></ul><h3 id="流程说明" tabindex="-1"><a class="header-anchor" href="#流程说明" aria-hidden="true">#</a> 流程说明</h3><ol><li><p><strong>获取客户端</strong>：通过<code>getClient()</code>方法获取与Milvus数据库通信的客户端。</p></li><li><p><strong>创建构建器</strong>：使用<code>queryWrapper()</code>、<code>deleteWrapper()</code>、<code>updateWrapper()</code>、<code>insertWrapper()</code>方法创建相应的操作构建器。</p></li><li><p><strong>执行操作</strong>：使用构建器构建具体的CRUD操作，并执行。</p></li><li><p><strong>获取集合名称</strong>：通过实体类上的<code>@MilvusCollection</code>注解获取集合名称。</p></li><li><p><strong>初始化构建器</strong>：使用<code>lambda()</code>方法初始化构建器，设置集合名称、客户端、转换缓存和实体类型。</p></li></ol><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><ul><li><p><strong>类型安全</strong>：通过泛型<code>T</code>确保操作的数据类型一致性。</p></li><li><p><strong>简化操作</strong>：封装CRUD操作，简化代码编写和数据库交互。</p></li><li><p><strong>易于扩展</strong>：抽象类设计使得扩展新的操作或自定义行为变得简单。</p></li><li><p><strong>注解驱动</strong>：利用<code>@MilvusCollection</code>注解自动获取集合名称，减少硬编码。</p></li></ul><p>通过<code>BaseMilvusMapper&lt;T&gt;</code>类，开发者可以方便地实现与Milvus数据库的交互，提高开发效率并降低出错率。</p><h2 id="iamservice接口模块介绍" tabindex="-1"><a class="header-anchor" href="#iamservice接口模块介绍" aria-hidden="true">#</a> IAMService接口模块介绍</h2><p><code>IAMService</code>接口模块提供了一套完整的身份认证与访问管理（Identity and Access Management, IAM）功能，用于管理Milvus数据库中的角色、用户以及权限。该模块允许开发者通过简单的方法调用来执行用户和角色的创建、查询、删除、权限授予和撤销等操作。</p><h3 id="方法getclient" tabindex="-1"><a class="header-anchor" href="#方法getclient" aria-hidden="true">#</a> 方法<code>getClient()</code></h3><ul><li><strong>功能</strong>：获取<code>MilvusClientV2</code>实例，用于与Milvus服务进行通信。</li></ul><h3 id="默认方法createrole-string-rolename" tabindex="-1"><a class="header-anchor" href="#默认方法createrole-string-rolename" aria-hidden="true">#</a> 默认方法<code>createRole(String roleName)</code></h3><ul><li><p><strong>功能</strong>：创建一个新的角色。</p></li><li><p><strong>参数</strong>：<code>roleName</code> - 要创建的角色名称。</p></li></ul><h3 id="默认方法createuser-string-username-string-password" tabindex="-1"><a class="header-anchor" href="#默认方法createuser-string-username-string-password" aria-hidden="true">#</a> 默认方法<code>createUser(String userName, String password)</code></h3><ul><li><p><strong>功能</strong>：创建一个新的用户。</p></li><li><p><strong>参数</strong>：</p></li><li><p><code>userName</code> - 要创建的用户的名称。</p></li><li><p><code>password</code> - 用户的密码。</p></li></ul><h3 id="默认方法describerole-string-rolename" tabindex="-1"><a class="header-anchor" href="#默认方法describerole-string-rolename" aria-hidden="true">#</a> 默认方法<code>describeRole(String roleName)</code></h3><ul><li><p><strong>功能</strong>：获取指定角色的权限信息。</p></li><li><p><strong>参数</strong>：<code>roleName</code> - 要查询的角色名称。</p></li><li><p><strong>返回</strong>：<code>DescribeRoleResp</code> - 包含角色权限信息的对象。</p></li></ul><h3 id="默认方法describeuser-string-username" tabindex="-1"><a class="header-anchor" href="#默认方法describeuser-string-username" aria-hidden="true">#</a> 默认方法<code>describeUser(String userName)</code></h3><ul><li><p><strong>功能</strong>：获取指定用户的详细信息。</p></li><li><p><strong>参数</strong>：<code>userName</code> - 要查询的用户名称。</p></li><li><p><strong>返回</strong>：<code>DescribeUserResp</code> - 包含用户详细信息的对象。</p></li></ul><h3 id="默认方法droprole-string-rolename" tabindex="-1"><a class="header-anchor" href="#默认方法droprole-string-rolename" aria-hidden="true">#</a> 默认方法<code>dropRole(String roleName)</code></h3><ul><li><p><strong>功能</strong>：删除指定的自定义角色。</p></li><li><p><strong>参数</strong>：<code>roleName</code> - 要删除的角色名称。</p></li></ul><h3 id="默认方法dropuser-string-username" tabindex="-1"><a class="header-anchor" href="#默认方法dropuser-string-username" aria-hidden="true">#</a> 默认方法<code>dropUser(String userName)</code></h3><ul><li><p><strong>功能</strong>：删除指定的用户。</p></li><li><p><strong>参数</strong>：<code>userName</code> - 要删除的用户名。</p></li></ul><h3 id="默认方法grantprivilege-string-rolename-string-objecttype-string-privilege-string-objectname" tabindex="-1"><a class="header-anchor" href="#默认方法grantprivilege-string-rolename-string-objecttype-string-privilege-string-objectname" aria-hidden="true">#</a> 默认方法<code>grantPrivilege(String roleName, String objectType, String privilege, String objectName)</code></h3><ul><li><p><strong>功能</strong>：授予角色特定的权限。</p></li><li><p><strong>参数</strong>：</p></li><li><p><code>roleName</code> - 要授予权限的角色名称。</p></li><li><p><code>objectType</code> - 权限对象的类型。</p></li><li><p><code>privilege</code> - 要授予的权限名称。</p></li><li><p><code>objectName</code> - 权限适用的对象名称。</p></li></ul><h3 id="默认方法grantrole-string-rolename-string-username" tabindex="-1"><a class="header-anchor" href="#默认方法grantrole-string-rolename-string-username" aria-hidden="true">#</a> 默认方法<code>grantRole(String roleName, String userName)</code></h3><ul><li><p><strong>功能</strong>：授予用户特定角色。</p></li><li><p><strong>参数</strong>：</p></li><li><p><code>roleName</code> - 要授予给用户的角色名称。</p></li><li><p><code>userName</code> - 已存在的用户名称。</p></li></ul><h3 id="默认方法listroles" tabindex="-1"><a class="header-anchor" href="#默认方法listroles" aria-hidden="true">#</a> 默认方法<code>listRoles()</code></h3><ul><li><p><strong>功能</strong>：列出所有自定义角色。</p></li><li><p><strong>返回</strong>：角色名称的列表。</p></li></ul><h3 id="默认方法listusers" tabindex="-1"><a class="header-anchor" href="#默认方法listusers" aria-hidden="true">#</a> 默认方法<code>listUsers()</code></h3><ul><li><p><strong>功能</strong>：列出所有现有用户的用户名。</p></li><li><p><strong>返回</strong>：用户名的列表。</p></li></ul><h3 id="默认方法revokeprivilege-string-rolename-string-objecttype-string-privilege-string-objectname-string-databasename" tabindex="-1"><a class="header-anchor" href="#默认方法revokeprivilege-string-rolename-string-objecttype-string-privilege-string-objectname-string-databasename" aria-hidden="true">#</a> 默认方法<code>revokePrivilege(String roleName, String objectType, String privilege, String objectName, String databaseName)</code></h3><ul><li><p><strong>功能</strong>：撤销已分配给角色的权限。</p></li><li><p><strong>参数</strong>：</p></li><li><p><code>roleName</code> - 要从中撤销权限的角色名称。</p></li><li><p><code>objectType</code> - 权限对象的类型。</p></li><li><p><code>privilege</code> - 要撤销的权限名称。</p></li><li><p><code>objectName</code> - 要撤销权限的API名称。</p></li><li><p><code>databaseName</code> - 可选的数据库名称。</p></li></ul><h3 id="默认方法revokerole-string-rolename-string-username" tabindex="-1"><a class="header-anchor" href="#默认方法revokerole-string-rolename-string-username" aria-hidden="true">#</a> 默认方法<code>revokeRole(String roleName, String userName)</code></h3><ul><li><p><strong>功能</strong>：撤销用户的角色。</p></li><li><p><strong>参数</strong>：</p></li><li><p><code>roleName</code> - 要撤销的角色名称。</p></li><li><p><code>userName</code> - 现有用户的用户名。</p></li></ul><h3 id="默认方法updatepassword-string-username-string-password-string-newpassword" tabindex="-1"><a class="header-anchor" href="#默认方法updatepassword-string-username-string-password-string-newpassword" aria-hidden="true">#</a> 默认方法<code>updatePassword(String userName, String password, String newPassword)</code></h3><ul><li><p><strong>功能</strong>：更新指定用户的密码。</p></li><li><p><strong>参数</strong>：</p></li><li><p><code>userName</code> - 现有用户的用户名。</p></li><li><p><code>password</code> - 用户当前的密码。</p></li><li><p><code>newPassword</code> - 用户的新密码。</p></li></ul><h3 id="优势-1" tabindex="-1"><a class="header-anchor" href="#优势-1" aria-hidden="true">#</a> 优势</h3><ul><li><p><strong>简化管理</strong>：通过统一的接口简化了用户和角色的管理。</p></li><li><p><strong>类型安全</strong>：接口方法使用明确的参数类型，减少了错误。</p></li><li><p><strong>易于集成</strong>：默认方法使得实现细节可以轻松集成到现有系统中。</p></li><li><p><strong>细粒度控制</strong>：支持细粒度的权限控制，增强了安全性。</p></li><li><p><strong>异常处理</strong>：方法中包含异常处理机制，确保了操作的稳定性。</p></li></ul><p><code>IAMService</code>接口模块是构建安全、可靠且易于管理的Milvus数据库访问控制系统的基础。</p><h2 id="条件构造器" tabindex="-1"><a class="header-anchor" href="#条件构造器" aria-hidden="true">#</a> 条件构造器</h2><p>条件构造器模块是一个用于动态构建查询条件的抽象基类<code>ConditionBuilder&lt;T&gt;</code>。它提供了一套丰富的方法来生成各种查询条件，从而简化数据库查询的构建过程。</p><h3 id="功能概述" tabindex="-1"><a class="header-anchor" href="#功能概述" aria-hidden="true">#</a> 功能概述</h3><ul><li><p><strong>动态属性映射</strong>：自动将实体对象的属性映射为查询条件。</p></li><li><p><strong>支持多种条件</strong>：包括等于、不等于、大于、小于、范围、空值检查、IN条件、LIKE条件等。</p></li><li><p><strong>逻辑操作</strong>：支持AND、OR和NOT逻辑操作，以构建复杂的查询条件。</p></li><li><p><strong>类型安全</strong>：泛型<code>T</code>确保了条件构造过程中的类型安全。</p></li><li><p><strong>易于扩展</strong>：抽象类设计允许开发者根据需要扩展更多条件构造功能。</p></li></ul><h3 id="主要方法" tabindex="-1"><a class="header-anchor" href="#主要方法" aria-hidden="true">#</a> 主要方法</h3><h3 id="getpropertiesmap-t-t" tabindex="-1"><a class="header-anchor" href="#getpropertiesmap-t-t" aria-hidden="true">#</a> <code>getPropertiesMap(T t)</code></h3><ul><li><strong>功能</strong>：将实体对象的属性及其值映射为Map。</li></ul><h3 id="基本条件方法" tabindex="-1"><a class="header-anchor" href="#基本条件方法" aria-hidden="true">#</a> 基本条件方法</h3><ul><li><code>eq</code>、<code>ne</code>、<code>gt</code>、<code>ge</code>、<code>lt</code>、<code>le</code>：分别用于添加等于、不等于、大于、大于等于、小于、小于等于条件。</li></ul><h3 id="范围和空值检查" tabindex="-1"><a class="header-anchor" href="#范围和空值检查" aria-hidden="true">#</a> 范围和空值检查</h3><ul><li><p><code>between</code>：添加范围条件。</p></li><li><p><code>isNull</code>、<code>isNotNull</code>：添加空值检查条件。</p></li></ul><h3 id="in条件和like条件" tabindex="-1"><a class="header-anchor" href="#in条件和like条件" aria-hidden="true">#</a> IN条件和LIKE条件</h3><ul><li><p><code>in</code>：添加IN条件，用于匹配字段值是否在给定的列表中。</p></li><li><p><code>like</code>：添加LIKE条件，用于执行模式匹配查询。</p></li></ul><h3 id="json和数组操作" tabindex="-1"><a class="header-anchor" href="#json和数组操作" aria-hidden="true">#</a> JSON和数组操作</h3><ul><li><p><code>jsonContains</code>、<code>jsonContainsAll</code>、<code>jsonContainsAny</code>：用于处理JSON字段的包含检查。</p></li><li><p><code>arrayContains</code>、<code>arrayContainsAll</code>、<code>arrayContainsAny</code>：用于处理数组字段的包含检查。</p></li><li><p><code>arrayLength</code>：检查数组字段的长度。</p></li></ul><h3 id="逻辑操作" tabindex="-1"><a class="header-anchor" href="#逻辑操作" aria-hidden="true">#</a> 逻辑操作</h3><ul><li><code>and</code>、<code>or</code>、<code>not</code>：用于组合多个条件构造器对象，执行逻辑AND、OR和NOT操作。</li></ul><h3 id="辅助方法" tabindex="-1"><a class="header-anchor" href="#辅助方法" aria-hidden="true">#</a> 辅助方法</h3><ul><li><p><code>convertValue</code>、<code>convertValues</code>：用于将值转换为适合查询的格式。</p></li><li><p><code>wrapFieldName</code>：用于包装字段名，可能需要根据具体的查询语言调整。</p></li></ul><h3 id="抽象方法" tabindex="-1"><a class="header-anchor" href="#抽象方法" aria-hidden="true">#</a> 抽象方法</h3><ul><li><code>buildFilters</code>：需要子类实现的具体过滤条件字符串构建逻辑。</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ConditionBuilder&lt;MyEntity&gt; builder = new ConditionBuilder&lt;&gt;();
builder.eq(&quot;name&quot;, &quot;John&quot;).gt(&quot;age&quot;, 18).and(new ConditionBuilder&lt;MyEntity&gt;().like(&quot;email&quot;, &quot;example.com&quot;));
String filters = builder.buildFilters();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引与度量类型详解" tabindex="-1"><a class="header-anchor" href="#索引与度量类型详解" aria-hidden="true">#</a> 索引与度量类型详解</h2><h3 id="索引类型-indextype" tabindex="-1"><a class="header-anchor" href="#索引类型-indextype" aria-hidden="true">#</a> 索引类型（IndexType）</h3><ul><li><p><strong>INVALID</strong>：无效索引类型，仅用于内部标记。</p></li><li><p><strong>FLAT</strong>：暴力搜索，适用于小规模数据集。</p></li><li><p><strong>IVF_FLAT</strong>：倒排索引平面模式，适用于中等规模数据集。</p></li><li><p><strong>IVF_SQ8</strong>：倒排索引量化模式，适用于大规模数据集，牺牲精度提升速度。</p></li><li><p><strong>IVF_PQ</strong>：倒排索引产品量化模式，适用于大规模高维数据集，平衡速度和精度。</p></li><li><p><strong>HNSW</strong>：分层导航小世界图，提供快速搜索，适用于大规模数据集。</p></li><li><p><strong>DISKANN</strong>：基于磁盘的近似最近邻搜索，适用于存储在磁盘上的大规模数据集。</p></li><li><p><strong>AUTOINDEX</strong>：自动选择最优索引类型。</p></li><li><p><strong>SCANN</strong>：使用扫描和树结构加速搜索。</p></li><li><p><strong>GPU_IVF_FLAT、GPU_IVF_PQ</strong>：GPU 加速索引，适用于 GPU 环境。</p></li><li><p><strong>BIN_FLAT、BIN_IVF_FLAT</strong>：二进制向量专用索引。</p></li><li><p><strong>TRIE</strong>：适用于字符串类型的字典树索引。</p></li><li><p><strong>STL_SORT</strong>：适用于标量字段的排序索引。</p></li></ul><h3 id="度量类型-metrictype" tabindex="-1"><a class="header-anchor" href="#度量类型-metrictype" aria-hidden="true">#</a> 度量类型（MetricType）</h3><ul><li><p><strong>INVALID</strong>：无效度量类型，仅用于内部标记。</p></li><li><p><strong>L2</strong>：欧几里得距离，适用于浮点向量。</p></li><li><p><strong>IP</strong>：内积，用于计算余弦相似度。</p></li><li><p><strong>COSINE</strong>：余弦相似度，适用于文本和图像搜索。</p></li><li><p><strong>HAMMING</strong>：汉明距离，适用于二进制向量。</p></li><li><p><strong>JACCARD</strong>：杰卡德相似系数，适用于集合相似度计算。</p></li></ul><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><p>以下是使用 MilvusPlus 进行向量搜索的示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Data
@MilvusCollection(name = &quot;face_collection&quot;) // 指定Milvus集合的名称
public class Face {
    @MilvusField(
            name = &quot;person_id&quot;, // 字段名称
            dataType = DataType.Int64, // 数据类型为64位整数
            isPrimaryKey = true, // 标记为主键
    )
    private Long personId; // 人员的唯一标识符

    @MilvusField(
            name = &quot;face_vector&quot;, // 字段名称
            dataType = DataType.FloatVector, // 数据类型为浮点型向量
            dimension = 128, // 向量维度，假设人脸特征向量的维度是128
    )
    @MilvusIndex(
            indexType = IndexParam.IndexType.IVF_FLAT, // 使用IVF_FLAT索引类型
            metricType = IndexParam.MetricType.L2, // 使用L2距离度量类型
            indexName = &quot;face_index&quot;, // 索引名称
            extraParams = { // 指定额外的索引参数
                    @ExtraParam(key = &quot;nlist&quot;, value = &quot;100&quot;) // 例如，IVF的nlist参数
            }
    )
    private List&lt;Float&gt; faceVector; // 存储人脸特征的向量
}
@Component
public class FaceMilvusMapper extends MilvusMapper&lt;Face&gt; {
    
}

@Component
@Slf4j
public class ApplicationRunnerTest implements ApplicationRunner {
    private final FaceMilvusMapper mapper;

    public ApplicationRunnerTest(FaceMilvusMapper mapper) {
        this.mapper = mapper;
    }

    @Override
    public void run(ApplicationArguments args){
        Face face=new Face();
        List&lt;Float&gt; vector = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; 128; i++) {
            vector.add((float) (Math.random() * 100)); // 这里仅作为示例使用随机数
        }
        face.setPersonId(1l);
        face.setFaceVector(vector);
        //新增
        List&lt;Face&gt; faces=new ArrayList&lt;&gt;();
        for (int i = 1; i &lt; 10 ;i++){
            Face face1=new Face();
            face1.setPersonId(Long.valueOf(i));
            List&lt;Float&gt; vector1 = new ArrayList&lt;&gt;();
            for (int j = 0; j &lt; 128; j++) {
                vector1.add((float) (Math.random() * 100)); // 这里仅作为示例使用随机数
            }
            face1.setFaceVector(vector1);
            faces.add(face1);
        }
        MilvusResp&lt;InsertResp&gt; insert = mapper.insert(faces.toArray(faces.toArray(new Face[0]))); log.info(&quot;insert--{}&quot;, JSONObject.toJSONString(insert));
        //id查询
        MilvusResp&lt;List&lt;MilvusResult&lt;Face&gt;&gt;&gt; query = mapper.getById(9l);
        log.info(&quot;query--getById---{}&quot;, JSONObject.toJSONString(query));
        //向量查询
        MilvusResp&lt;List&lt;MilvusResult&lt;Face&gt;&gt;&gt; query1 = mapper.queryWrapper()
                .vector(Face::getFaceVector, vector)
                .ne(Face::getPersonId, 1L)
                .topK(3)
                .query();
        log.info(&quot;向量查询 query--queryWrapper---{}&quot;, JSONObject.toJSONString(query1));
        //标量查询
        MilvusResp&lt;List&lt;MilvusResult&lt;Face&gt;&gt;&gt; query2 = mapper.queryWrapper()
                .eq(Face::getPersonId, 2L)
                .limit(3)
                .query();
        log.info(&quot;标量查询   query--queryWrapper---{}&quot;, JSONObject.toJSONString(query2));
        //更新
        vector.clear();
        for (int i = 0; i &lt; 128; i++) {
            vector.add((float) (Math.random() * 100)); // 这里仅作为示例使用随机数
        }
        MilvusResp&lt;UpsertResp&gt; update = mapper.updateById(face);log.info(&quot;update--{}&quot;, JSONObject.toJSONString(update));
        //id查询
        MilvusResp&lt;List&lt;MilvusResult&lt;Face&gt;&gt;&gt; query3 = mapper.getById(1L);log.info(&quot;query--getById---{}&quot;, JSONObject.toJSONString(query3));
        //删除
        MilvusResp&lt;DeleteResp&gt; remove = mapper.removeById(1L);log.info(&quot;remove--{}&quot;, JSONObject.toJSONString(remove));
        //查询
        MilvusResp&lt;List&lt;MilvusResult&lt;Face&gt;&gt;&gt; query4 = mapper.getById(1L);log.info(&quot;query--{}&quot;, JSONObject.toJSONString(query4));

    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="欢迎给项目点赞" tabindex="-1"><a class="header-anchor" href="#欢迎给项目点赞" aria-hidden="true">#</a> 欢迎给项目点赞！！</h2><p><strong>https://gitee.com/dromara/MilvusPlus</strong></p>`,128),s=[d];function t(o,c){return r(),l("div",null,s)}const g=i(a,[["render",t],["__file","MilvusPlus.html.vue"]]);export{g as default};
