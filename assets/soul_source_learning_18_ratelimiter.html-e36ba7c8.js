import{_ as n,o as s,c as a,f as t}from"./app-39cd5ef1.js";const p={},e=t(`<h2 id="回顾" tabindex="-1"><a class="header-anchor" href="#回顾" aria-hidden="true">#</a> 回顾</h2><p>在之前的 HTTP 请求初探的文章中，大体梳理了 Soul 插件的处理流程，也得知了 DividePlugin、GlobalPlugin，WebClientPlugin，WebCilentResponsePlugin 插件的具体作用，在梳理流程中，发现 Soul 的插件是有<strong>先后顺序</strong>的，在 DividePlugin 插件之前做了很多前置插件的操作，其中包含了我们本章分析的主题<strong>RateLimiterPlugin 限流插件</strong>（其中一种）。</p><h2 id="学习使用" tabindex="-1"><a class="header-anchor" href="#学习使用" aria-hidden="true">#</a> 学习使用</h2><h3 id="阅读官方文档-对其有大概认知" tabindex="-1"><a class="header-anchor" href="#阅读官方文档-对其有大概认知" aria-hidden="true">#</a> 阅读官方文档 对其有大概认知</h3><p><a href="https://dromara.org/zh/projects/soul/rate-limiter-plugin/">rateLimiter 插件</a></p><p>通过官方文档的阅读我们得知了<strong>RateLimiterPlugin</strong>的两个核心点<strong>速率、容量</strong></p><p>以下讲解来源于官方文档</p><ul><li>容量：是允许用户在一秒钟内执行的最大请求数。这是令牌桶可以保存的令牌数。</li><li>速率：是你允许用户每秒执行多少请求，而丢弃任何请求。这是令牌桶的填充速率。</li></ul><p>可以看出<strong>RateLimiterPlugin</strong>限流核心在于<strong>令牌桶算法</strong>的实现。</p><p>ps：关于限流算法常见的有四种实现<strong>令牌桶算法</strong>，<strong>漏斗算法</strong>，<strong>计数器（固定窗口）算法</strong>，<strong>滑动窗口算法</strong>，详情看对应<a href="https://blog.csdn.net/weixin_41846320/article/details/95941361">博客介绍</a></p><h3 id="初步使用" tabindex="-1"><a class="header-anchor" href="#初步使用" aria-hidden="true">#</a> 初步使用</h3><h4 id="启用对应插件" tabindex="-1"><a class="header-anchor" href="#启用对应插件" aria-hidden="true">#</a> 启用对应插件</h4><p>在 Soul 网关<strong>系统管理-插件管理</strong>处，将状态更改为启用状态，注意此处需要填写 redis 相关配置，Soul 令牌桶基于 Redis。</p><p>为什么 Soul 的令牌桶算法要基于 redis？</p><p>在集群部署情况下单机的令牌桶算法无法满足集群状态下的限流功能。</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e25dd524c294b4f9c227e3f2127757f~tplv-k3u1fbpfcp-watermark.image" alt="" tabindex="0"><figcaption></figcaption></figure><h4 id="添加限流选择器、规则" tabindex="-1"><a class="header-anchor" href="#添加限流选择器、规则" aria-hidden="true">#</a> 添加限流选择器、规则</h4><p>在 Soul 网关<strong>插件列表</strong>处，选择 rate_limiter 处添加规则及选择器配置，不懂如何添加的可以先阅读<a href="https://juejin.cn/post/6922431625230417928">选择器\\规则的匹配逻辑</a>. <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9cbbc63ed6214aeda8c70f8e34d7c19c~tplv-k3u1fbpfcp-watermark.image" alt=""><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25e67268dd5e4aa9a081a51963a03da8~tplv-k3u1fbpfcp-watermark.image" alt=""> 在此处添加的容量及速率都为 1 主要为了验证插件是否启用。</p><h4 id="接口对应访问" tabindex="-1"><a class="header-anchor" href="#接口对应访问" aria-hidden="true">#</a> 接口对应访问</h4><p>调用<em>http://127.0.0.1:9195/http/test/findByUserId?userId=10</em> 进行访问，速率高于 1 的情况下出现如下接口返回结果，代表插件成功使用。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">429</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;You have been restricted, please try again later!&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="源码阅读-带着问题读源码" tabindex="-1"><a class="header-anchor" href="#源码阅读-带着问题读源码" aria-hidden="true">#</a> 源码阅读 带着问题读源码</h3><h4 id="如何保证在页面修改-redis-配置后立即生效的-后台对应的-redis-连接立马变更的。" tabindex="-1"><a class="header-anchor" href="#如何保证在页面修改-redis-配置后立即生效的-后台对应的-redis-连接立马变更的。" aria-hidden="true">#</a> 如何保证在页面修改 redis 配置后立即生效的，后台对应的 redis 连接立马变更的。</h4><p>答案自然数据同步脱不了干系。</p><p>在修改插件的配置时，也发布了一个插件数据变更的事件通知，在之前梳理<a href="https://juejin.cn/post/6920609782349086727">Soul 网关同步数据整体流程</a>时,已经得知修改的插件数据除了更改了 JVM 缓存内的数据外，还对对应的插件进行下发操作，如下图 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9434447ebc674f58b65c26b65f855181~tplv-k3u1fbpfcp-watermark.image" alt=""> 而针对于<strong>RateLimiterPlugin</strong>而言，其主要实现了<strong>handlePlugin</strong>的接口，那这个对应的实现到底做了哪些事呢？</p><p>具体的方法为<strong>RateLimiterPluginDataHandler 的 handlerPlugin</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerPlugin</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pluginData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//加载限流插件配置</span>
            <span class="token class-name">RateLimiterConfig</span> rateLimiterConfig <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//判断是否需要重新加载redis连接值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> <span class="token operator">!</span>rateLimiterConfig<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LettuceConnectionFactory</span> lettuceConnectionFactory <span class="token operator">=</span> <span class="token function">createLettuceConnectionFactory</span><span class="token punctuation">(</span>rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
                lettuceConnectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisSerializationContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> serializationContext <span class="token operator">=</span>
                        <span class="token class-name">RedisSerializationContext</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">newSerializationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashKey</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashValue</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ReactiveRedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reactiveRedisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveRedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lettuceConnectionFactory<span class="token punctuation">,</span> serializationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> reactiveRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码有几个较为关键的点：</p><p>在上述代码中将限流插件的配置和对应的 redisTemplate 实例放入了 Singleton.INST 对应 map 中。</p><p>在插件数据过来时，判断是否存在 redis 连接实例，是否存在限流配置实例，判断当前的限流配置实例是否和传递的限流实例一致，不一致就认为配置是有更改的，就重新初始化限流实例和连接池实例放入 Singleton.INST 的 map 中，由此而言就保证了更改 redis 配置的热部署。</p><p>if 判断中的代码就是基于 SpringDataRedis 封装成一个对应 redis 连接池。</p><p>ps：Singleton.INST 是枚举实现的单例模式。</p><h3 id="限流插件是底层是如何实现的呢" tabindex="-1"><a class="header-anchor" href="#限流插件是底层是如何实现的呢" aria-hidden="true">#</a> 限流插件是底层是如何实现的呢？</h3><h4 id="debug-调用链" tabindex="-1"><a class="header-anchor" href="#debug-调用链" aria-hidden="true">#</a> Debug 调用链</h4><p><strong>RateLimiterPlugin</strong>由于需要对特定规则进行限流，所以依旧实现了<strong>AbstractSoulPlugin</strong>，之前依旧梳理过<strong>AbstractSoulPlugin 的 excute</strong>的方法和作用了，所以这里不重复解释，可观看<a href="https://juejin.cn/post/6921685390982119438">Http 调用流程梳理</a>，加深对该类的印象。</p><p>本节重点还是看具体的<strong>doexcute</strong>方法做了哪些事。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">final</span> <span class="token class-name">String</span> handle <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">final</span> <span class="token class-name">RateLimiterHandle</span> limiterHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token class-name">RateLimiterHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> redisRateLimiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limiterHandle<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limiterHandle<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token comment">//返回的错误信息 429错误编码</span>
                       exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
                   <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中可以看出是通过<strong>redisRateLimiter.isAllowed</strong>来判断是否获取令牌成功的。 该方法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RateLimiterResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> replenishRate<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> burstCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;RedisRateLimiter is not initialized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token comment">//获取redis Key</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//封装lua脚本执行所需的参数 第一位是速率 第二位是容量 第三位是当前时间戳10位 第四位固定参数值1 代表申请的令牌数</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scriptArgs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>replenishRate <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> burstCapacity <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//执行lua脚本</span>
       <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resultFlux <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>script<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> scriptArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> resultFlux<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>longs<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   longs<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token keyword">return</span> longs<span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>results <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   <span class="token comment">//allowed 代表执行的结果 为1 代表执行成功</span>
                   <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">;</span>
                   <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token class-name">RateLimiterResponse</span> rateLimiterResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RateLimiterResponse</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;RateLimiter response:{}&quot;</span><span class="token punctuation">,</span> rateLimiterResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token keyword">return</span> rateLimiterResponse<span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error determining if user allowed from redis:{}&quot;</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法-getkeys-id" tabindex="-1"><a class="header-anchor" href="#方法-getkeys-id" aria-hidden="true">#</a> 方法 getKeys(id)</h4><p>该方法是获取 redis 需要操作的 key，一共获取了两个类型的 Key，格式如下:</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55ce72f4e044405fbd3b1461905072f2~tplv-k3u1fbpfcp-watermark.image" alt="" tabindex="0"><figcaption></figcaption></figure><p>中间那位特别长的数字是<strong>规则 ID</strong>，因为限流的最小粒度是规则。</p><p>第一个 timestamp 记录的是<strong>上一次调用的时间戳</strong></p><p>第二个 tokens 记录的是<strong>上一次调用完成后剩余的令牌数量</strong></p><h4 id="execute-this-script-keys-scriptargs" tabindex="-1"><a class="header-anchor" href="#execute-this-script-keys-scriptargs" aria-hidden="true">#</a> execute(this.script, keys, scriptArgs）</h4><p>执行 lua 脚本 keys 传递的是 getKeys(id)返回值，scriptArgs 传递的是所需的参数</p><p>通过阅读上述代码已经知晓 限流规则的具体实现是交给特定的 lua 脚本的。</p><p>ps：这里需要提醒一下限流算法是令牌桶算法，令牌桶算法一共有两种大体实现，一种是有个线程不断生成令牌，当请求进来时，先从对应的队列中获取令牌，但这种令牌生成方式在设定阈值特别大时，会非常消耗性能，所以有了第二种令牌桶算法，在获取令牌时实时计算令牌数量，而 soul 就是基于第二种实现的。</p><h4 id="lua-限流算法分析" tabindex="-1"><a class="header-anchor" href="#lua-限流算法分析" aria-hidden="true">#</a> Lua 限流算法分析</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 当前规则令牌剩余数量存储key</span>
<span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">-- 当前规则上次调用时间</span>
<span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">-- 速率</span>
<span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 容量</span>
<span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 时间戳</span>
<span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 值为1</span>
<span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- 容量除以速率 计算填充时间</span>
<span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate
<span class="token comment">-- 计算过期时间 取下限</span>
<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">-- 获取当前存有的令牌数</span>
<span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
<span class="token comment">-- 将令牌数量赋值为设定的容量</span>
 last_tokens <span class="token operator">=</span> capacity
<span class="token keyword">end</span>
<span class="token comment">-- 获取上一次调用时间</span>
<span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
 last_refreshed <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">end</span>
<span class="token comment">-- 计算出上次调用和本次调用之间的时间差</span>
<span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span>
<span class="token comment">-- 计算出当前剩余的令牌数量</span>
<span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">--  判断当前令牌数量 数量&gt;=1 代表获取成功</span>
<span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">&gt;=</span> requested
<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens
<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">if</span> allowed <span class="token keyword">then</span>
 <span class="token comment">-- 申请一个令牌</span>
 new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested
 allowed_num <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

<span class="token comment">-- setex 设置过期key 过期时间 新值</span>
redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;setex&quot;</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>
redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;setex&quot;</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span>

<span class="token keyword">return</span> <span class="token punctuation">{</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐先了解一下 lua<strong>KEYS ARGS</strong>的作用<a href="https://www.cnblogs.com/liuyu7177/p/10918250.html">redis lua 中 keys[1] 和 argv[1] 的理解</a>.</p><p>Lua 代码整体逻辑还是非常明朗的，在这里细讲也讲不出个啥来，代码注释已经打全了。</p><p>本人在这里疑惑的有两点</p><ul><li><strong>ttl</strong>参数的计算 乘 2 的目的是为了怕不是整数？，所以进行的*2 取最小操作?</li><li><strong>filled_tokens</strong>参数的计算 核心代码 last_tokens+(delta*rate)，其中 delta 参数是两个十位时间戳相减得来 ，但是 rate 是按秒来生成的，难道不应该是 last_tokens+((delta/1000)*rate)吗？</li></ul>`,55),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","soul_source_learning_18_ratelimiter.html.vue"]]);export{k as default};
