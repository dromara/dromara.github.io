import{_ as n,o as s,c as a,f as t}from"./app-d3789271.js";const e={},p=t(`<h1 id="review" tabindex="-1"><a class="header-anchor" href="#review" aria-hidden="true">#</a> Review</h1><p>In the Soul Request Processing Overview article, we learned that Soul handles requests in ** Excute of Default SoulPluginChain ** a library, where it executes a plug-in chain pattern to complete the request processing.</p><p>We have generally combed the injected ** plugins ** plug-ins, but even so, we still can&#39;t see the whole picture. For this reason, we have specially combed the classes involved in the soul plug-ins. The overall results are shown in the following figure.</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d9c8e69429e4cb1bcc5bd54ad4f6112~tplv-k3u1fbpfcp-watermark.image" alt="" tabindex="0"><figcaption></figcaption></figure><p>As you can see in the teasing article, the core classes are ** SoulPlugin、PluginEnum、PluginDataHandler、MetaDataSubscriber **. In the teasing request related article, we only need to focus on the SoulPlugin and PluginEnum classes at present.</p><p>Now that we have some understanding of the SoulPlugin class, what is the main purpose of the PluginEnum enumeration class?</p><p>PluginEnum: An enumeration class for plug-ins</p><table><thead><tr><th>Property</th><th>Action</th></tr></thead><tbody><tr><td>code</td><td>The smaller the order of plug-in execution, the earlier the execution.</td></tr><tr><td>role</td><td>The role has not found a physical reference address at this time</td></tr><tr><td>name</td><td>Plug-in name</td></tr></tbody></table><p>In fact, it is not difficult to find that the current ** Plugins for Default SoulPluginChain ** plug-in has a fixed order of execution, so where is the order of execution of this plug-in defined?</p><p>Finally, it can be traced back to the ** SoulConfiguration ** class.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">SoulWebHandler</span> <span class="token function">soulWebHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> soulPlugins <span class="token operator">=</span> pluginList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">SoulPlugin</span><span class="token operator">::</span><span class="token function">getOrder</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SoulWebHandler</span><span class="token punctuation">(</span>soulPlugins<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sort out the related references of the entire PluginEnum class, and sort out the following table. It is not difficult to see the order relationship <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d89a3b45058846be94aa0b8935ec1868~tplv-k3u1fbpfcp-watermark.image" alt=""> between plug-ins.</p><table><thead><tr><th>Level</th><th>Action</th></tr></thead><tbody><tr><td>Level 1</td><td>Only GlobalPlugin Global Plugin</td></tr><tr><td>Level 2 to 8</td><td>It can be understood as a pre-processing plug-in before the request is initiated</td></tr><tr><td>Level 9 to 11</td><td>It can be understood as different call processing for the way of the caller.</td></tr><tr><td>Level 12</td><td>Only MonitorPlugin monitor plug-in</td></tr><tr><td>Level 13</td><td>It is a response-related plug-in for processing the results returned by each caller.</td></tr></tbody></table><p>In the previous review, we have already understood the general process of soul processing requests.</p><ul><li>1.GloBalPlugin performs global initialization</li><li>2.Some plug-ins process the request according to rules such as authentication, current limiting, and fusing</li><li>3.Select the calling mode suitable for you to assemble the parameters and initiate the call.</li><li>4.Monitor</li><li>5.Process the result of the call</li></ul><h1 id="request-process-sorting" tabindex="-1"><a class="header-anchor" href="#request-process-sorting" aria-hidden="true">#</a> Request process sorting</h1><blockquote><p>The following demo code screenshot is from the HTTP demo under soul-examples, and the interface address called is the http://127.0.0.1:9195/http/test/findByUserId?userId=10.</p></blockquote><p>Bury the point in the ** Excute of Default SoulPluginChain ** method to see what classes an HTTP request call goes through?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> plugins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">SoulPlugin</span> plugin <span class="token operator">=</span> plugins<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Boolean</span> skip <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>skip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Skipped plugin: &quot;</span><span class="token operator">+</span>plugin<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;org.dromara.soul.plugin.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Not skipped plugin: &quot;</span><span class="token operator">+</span>plugin<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;org.dromara.soul.plugin.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The unskipped plug-ins for the final output are as follows:</p><p>Plug-ins that are not skipped are global. Global Plugin. <br> Plug-ins that are not skipped are sign. SignPlugin. <br> Plug-ins that are not skipped are WAF. WafPlugin. <br> Plug-ins that are not skipped are ratelimiter. Rate LimiterPlugin. <br> Plug-ins that are not skipped are hystrix. Hystrix Plugin. <br> The plug-in that was not skipped was resilience4j.Resilience4JPlugin <br> Plug-ins that are not skipped are divide. DividePlugin. <br> Plug-ins that are not skipped are HTTP client. Web ClientPlugin. <br> Plug-ins that are not skipped are Alibaba. Dubbo. Param. Body ParamPlugin. <br> Plug-ins that are not skipped are monitor. MonitorPlugin. <br> Plug-ins that are not skipped are HTTP client. Response. Web ClientResponsePlugin. <br></p><blockquote><p>Here is a little puzzle, why this Alibaba. Dubbo. Param. BodyParamPlugin plug-in will be executed, temporarily ignored, and tracked later.</p></blockquote><p>We found that the general flow of the plug-in executed by a gateway call for an HTTP request was consistent with our guess. <br> For now, let&#39;s just pick the key points, namely ** GlobalPlugin、DividePlugin、WebClientPlugin、WebClientResponsePlugin **.</p><p>Initiate a Debug call to track the actions of each of the four plug-ins in turn.</p><h2 id="global-plugin-soulcontext-object-wrapper" tabindex="-1"><a class="header-anchor" href="#global-plugin-soulcontext-object-wrapper" aria-hidden="true">#</a> Global Plugin SoulContext Object Wrapper</h2><p>The plug-in&#39;s excute method for GlobalPlugin looks like this</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> upgrade <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;Upgrade&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SoulContext</span> soulContext<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>upgrade<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">&quot;websocket&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>upgrade<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            soulContext <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParams <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            soulContext <span class="token operator">=</span> <span class="token function">transformMap</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">,</span> soulContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is not difficult to see that the main purpose of the excute method of GlobalPlugin is to encapsulate an ** The SoulContext object ** exchange object and put it into the exchange (the exchange object is a shared object on the entire plug-in chain, and after a plug-in is executed, it is passed to the next plug-in. I understand it as a ThreadLocal-like object.</p><p>So what are the properties of the SoulContext object?</p><table><thead><tr><th>property</th><th>Meaning</th></tr></thead><tbody><tr><td>module</td><td>Each RPCType has a different value for the preceding address of the gateway call when HTTP is called.</td></tr><tr><td>method</td><td>Method name after cutting (when RpcType is HTTP)</td></tr><tr><td>rpcType</td><td>RPC call types include Http, dubbo, sofa, and so on</td></tr><tr><td>httpMethod</td><td>Http calls currently only support get, post,</td></tr><tr><td>sign</td><td>Currently, we do not know the specific function of the authentication related attributes, which may be related to the SignPlugin plug-in.</td></tr><tr><td>timestamp</td><td>Timestamp</td></tr><tr><td>appKey</td><td>Currently, we do not know the specific function of the authentication related attributes, which may be related to the SignPlugin plug-in.</td></tr><tr><td>path</td><td>Path refers to the full path of the call to the soul Gateway (when RpcType is HTTP)</td></tr><tr><td>contextPath</td><td>Consistent with module value (when RPCType is HTTP)</td></tr><tr><td>realUrl</td><td>Consistent with the value of method (when RpcType is HTTP)</td></tr><tr><td>dubboParams</td><td>Parameters for dubbo?</td></tr><tr><td>startDateTime</td><td>The start time is suspected to be combined with the monitoring plug-in and the statistical indicator module.</td></tr></tbody></table><p>After executing the Global Plugin, the final encapsulated SoulContext object looks like this. <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d34d9e900a1e4448b8f15302db36a5bb~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>The parameter encapsulation of SoulContext of other RPCTypes can be traced by viewing the ** DefaultSoulContext Builder build ** method. Since this article mainly traces HTTP calls, it is not redundant to discuss here.</p><h2 id="divideplugin-routing-plugin" tabindex="-1"><a class="header-anchor" href="#divideplugin-routing-plugin" aria-hidden="true">#</a> DividePlugin Routing Plugin</h2><p>After the GlobalPlugin plug-in is executed, it is finally packaged into one ** The SoulContext object ** and placed in ** ServerWebExchange ** for use by the downstream call chain.</p><p>Next, let&#39;s take a look ** Divide Plugin ** at what kind of role it plays in the whole chain call process?</p><h3 id="abstractsoulplugin" tabindex="-1"><a class="header-anchor" href="#abstractsoulplugin" aria-hidden="true">#</a> AbstractSoulPlugin</h3><p>By tracing back to the source code ** The DividePlugin plug-in inherits from the AbstractSoulPlugin class, which implements the SoulPlugin interface **.</p><p>So ** AbstractSoulPlugin ** what extensions have been made? Let&#39;s tease out the methods of this class.</p><table><thead><tr><th>method</th><th>Action</th></tr></thead><tbody><tr><td>excute</td><td>Implemented in the SoulPlugin interface, plays a role ** The role of the template approach ** in AbstractSoulPlugin</td></tr><tr><td>doexcute</td><td>Implemented ** Abstract method ** by various subclasses</td></tr><tr><td>matchSelector</td><td>Match selector</td></tr><tr><td>filterSelector</td><td>Filter selector</td></tr><tr><td>matchRule</td><td>Matching rules</td></tr><tr><td>filterRule</td><td>Filter rules</td></tr><tr><td>handleSelectorIsNull</td><td>Handle null selector case</td></tr><tr><td>handleRuleIsNull</td><td>Handle null rule case</td></tr><tr><td>selectorLog</td><td>Selector log printing</td></tr><tr><td>ruleLog</td><td>Rule log printing</td></tr></tbody></table><p>Look at ** excute ** the specific function of the method.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> pluginName <span class="token operator">=</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Obtain corresponding plugin</span>
        <span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainPluginData</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check if the plugin is enabled</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pluginData <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pluginData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Obtain all selectors under the plugin</span>
            <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectors <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainSelectorData</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>selectors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">handleSelectorIsNull</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Match selector</span>
            <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selectorData <span class="token operator">=</span> <span class="token function">matchSelector</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">handleSelectorIsNull</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Log selector</span>
            <span class="token function">selectorLog</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">,</span> pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainRuleData</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">handleRuleIsNull</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">RuleData</span> rule<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">SelectorTypeEnum</span><span class="token punctuation">.</span><span class="token constant">FULL_FLOW</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rule <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rules<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// Match rule</span>
                rule <span class="token operator">=</span> <span class="token function">matchRule</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> handleRu<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>p9<span class="token operator">-</span>juejin<span class="token punctuation">.</span>byteimg<span class="token punctuation">.</span>com<span class="token operator">/</span>tos<span class="token operator">-</span>cn<span class="token operator">-</span>i<span class="token operator">-</span>k3u1fbpfcp<span class="token operator">/</span>f523f655f0014d288b7a4502cc6a08d1<span class="token operator">~</span>tplv<span class="token operator">-</span>k3u1fbpfcp<span class="token operator">-</span>watermark<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token function">leIsNull</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Log rule</span>
            <span class="token function">ruleLog</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Execute subclass-specific implementation</span>
            <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> selectorData<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The final flow chart is as follows: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ec8bd02d6546c79a96d67535049aae~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>PS: In the above flow chart, there is no specific method-level processing.</p><p>However, there are still several points that need to be explained:</p><ul><li>1.The plug-in data, selector data, and rule data are all obtained from ** BaseDataCache **. This class is the class that will be affected in the data synchronization process.</li><li>2.Selector type. When the SpringMvc project is used to register an interface, an isFull option will be set to true to represent the global proxy. In the global proxy mode, only one selector \\ rule (referring to all interfaces of the proxy) will be registered, so the corresponding processing here is rule. Size () -1.</li><li>3.For the selection of selector and rule, the actual processing is much more complicated. Considering that it is to introduce the general logic of a request process, it will not be elaborated here. If you are interested, you can check it ** Match Strategy, AbstractMatchStrategy and their related implementation classes ** (a separate article will be explained later). The corresponding page here is as follows: <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f624b13f205a44e29b2799718433e0c9~tplv-k3u1fbpfcp-watermark.image" alt=""><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f590c2cf336442f08a52b864c81d41a8~tplv-k3u1fbpfcp-watermark.image" alt=""></li></ul><p>To sort out ** Exeute method of AbstractSoulPlugin ** the function, after the guidance of the above flow chart, we already know that the function of this method is to select the plug-in -- &gt; select the selector -- &gt; select the rule, and finally hand over to the method of the ** doexcute ** subclass.</p><p>Next, let&#39;s take a ** The doexcute of DividePlugin ** look at what the method does.</p><h3 id="divideplugin" tabindex="-1"><a class="header-anchor" href="#divideplugin" aria-hidden="true">#</a> DividePlugin</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> soulContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// Obtain rule handling data</span>
        <span class="token keyword">final</span> <span class="token class-name">DivideRuleHandle</span> ruleHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DivideRuleHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Obtain injected addresses under this selector</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList <span class="token operator">=</span> <span class="token class-name">UpstreamCacheManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findUpstreamListBySelectorId</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;divide upstream configuration error： {}&quot;</span><span class="token punctuation">,</span> rule<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Choose an address based on the load balancing strategy corresponding to the rule</span>
        <span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">=</span> <span class="token class-name">LoadBalanceUtils</span><span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getLoadBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;divide has no upstream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// set the http url</span>
        <span class="token class-name">String</span> domain <span class="token operator">=</span> <span class="token function">buildDomain</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Assemble the real calling address</span>
        <span class="token class-name">String</span> realURL <span class="token operator">=</span> <span class="token function">buildRealURL</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> soulContext<span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_URL</span><span class="token punctuation">,</span> realURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Set timeout and retry count</span>
        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_TIME_OUT</span><span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_RETRY</span><span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After the above code is sorted out, the general logic is as follows:</p><ul><li>1.Obtain the registration address corresponding to the selector, and the corresponding page data is as follows <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bea039b5c98040ee80433f785dac85aa~tplv-k3u1fbpfcp-watermark.image" alt=""></li><li>2.Obtain the load balancing policy according to the handle field of the rule, and select the real call address (** LoadBalanceUtils **), retry times and timeout time. The corresponding page data is as follows. <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07db1f8f76fc43b2aec61ee0f9ca4c05~tplv-k3u1fbpfcp-watermark.image" alt=""></li><li>3.The real call address, timeout, and number of retries are passed to ** ServerWebExchange ** for use by the downstream call chain. Demo of debug: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0aa5f7d95f2942169b33029f074f1712~tplv-k3u1fbpfcp-watermark.image" alt=""> PS: We don&#39;t see where the parameters are in the above theme logic? Where is this parameter encapsulated? The answer ** In the build RealURL method ** is obtained from ** exchange ** the context.</li></ul><h2 id="web-clientplugin-http-request-calling-plug-in" tabindex="-1"><a class="header-anchor" href="#web-clientplugin-http-request-calling-plug-in" aria-hidden="true">#</a> Web ClientPlugin Http request calling plug-in</h2><p>Next, let&#39;s look at how Soul initiates the request call.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> soulContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// Obtain the real address</span>
        <span class="token class-name">String</span> urlPath <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Obtain the timeout period</span>
        <span class="token keyword">long</span> timeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_TIME_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">3000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Obtain the retry count</span>
        <span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_RETRY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The request urlPath is {}, retryTimes is {}&quot;</span><span class="token punctuation">,</span> urlPath<span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpMethod</span> method <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebClient<span class="token punctuation">.</span>RequestBodySpec</span> requestBodySpec <span class="token operator">=</span> webClient<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">handleRequestBody</span><span class="token punctuation">(</span>requestBodySpec<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> retryTimes<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the web Client ** excute ** method, three things are done</p><ul><li>1.Take out the properties you put into exchange from the Divide plugin. ** Real address of the call, timeout, number of retries **.</li><li>2.Encapsulates an ** RequestBodySpec ** object (something that doesn&#39;t recognize responsive programming)</li><li>3.A ** handleRequestBody ** method was called</li></ul><p>Know ** handleRequestBody ** the method first</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleRequestBody</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>RequestBodySpec</span> requestBodySpec<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token keyword">int</span> retryTimes<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> requestBodySpec<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>httpHeaders <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            httpHeaders<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            httpHeaders<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token function">buildMediaType</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromDataBuffers</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// Log on failure</span>
                <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// Set timeout</span>
                <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// Set request retry strategy</span>
                <span class="token punctuation">.</span><span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token class-name">Retry</span><span class="token punctuation">.</span><span class="token function">onlyIf</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ConnectTimeoutException</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">retryMax</span><span class="token punctuation">(</span>retryTimes<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">backoff</span><span class="token punctuation">(</span><span class="token class-name">Backoff</span><span class="token punctuation">.</span><span class="token function">exponential</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// Handle after request completes</span>
                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">doNext</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this method, it can be generally understood as</p><ul><li>The request header from exchange is placed in the request header for this call.</li><li>Set the contentType</li><li>Set the timeout</li><li>Set the failure response</li><li>Set the retry scenario and retry times</li><li>Processing of final results. Need to see another one ** The doNext method ** in the process</li></ul><p>The general logic is to determine whether the request is successful or not, and put the result of the request into exchange for the downstream plug-in to process.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doNext</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ClientResponse</span> res<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_RESULT_TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ResultEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_RESULT_TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ResultEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_ATTR</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS: Although we don&#39;t understand responsive programming, it doesn&#39;t affect us to read the code.</p><h2 id="web-clientresponseplugin-http-result-processing-plug-in" tabindex="-1"><a class="header-anchor" href="#web-clientresponseplugin-http-result-processing-plug-in" aria-hidden="true">#</a> Web ClientResponsePlugin Http Result Processing Plug-in</h2><p>The excute method of this implementation has no core logic, which is to judge the status code of the request and return different data formats to the front end according to the status code.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ClientResponse</span> clientResponse <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_ATTR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">)</span>
                    <span class="token operator">||</span> response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_GATEWAY</span>
                    <span class="token operator">||</span> response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">GATEWAY_TIMEOUT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asHttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyExtractors</span><span class="token punctuation">.</span><span class="token function">toDataBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="sum-up" tabindex="-1"><a class="header-anchor" href="#sum-up" aria-hidden="true">#</a> Sum up</h1><p>At this point, an Http request call based on the Soul gateway is largely over.</p><p>Combing HTTP request call flow</p><ul><li>Global Plugin encapsulates the Soul Context object</li><li>The front plug-in handles operations such as fusing and current-limiting authentication.</li><li>The Divide plug-in selects the real address of the corresponding call, the number of retries, and the timeout period.</li><li>The Web Client plug-in makes the actual Http call</li><li>The Web ClientResponse plug-in processes the corresponding result and returns to the foreground.</li></ul><p>Based on the general flow of Http calls, we can roughly guess that the flow based on other RPC calls is to replace the plug-in that initiates the request and the plug-in that returns the result processing.</p><p>In the above, we also mentioned the selection ** LoadBalanceUtils ** of routing rules, selectors and the processing ** MatchStrategy ** of rules.</p><p>After that, a new chapter will be opened to unveil the mystery of RPC generalization call, routing, selector and rule matching step by step.</p>`,73),o=[p];function c(l,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","soul_source_learning_17_http.html.vue"]]);export{k as default};
