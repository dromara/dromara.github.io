import{_ as n,o as s,c as a,f as t}from"./app-4aee1e45.js";const e={},p=t(`<h2 id="review" tabindex="-1"><a class="header-anchor" href="#review" aria-hidden="true">#</a> Review</h2><p>In the previous article on HTTP requests, the processing flow of Soul plug-ins was generally combed, and the specific functions of DividePlugin, GlobalPlugin, WebClientPlugin and WebCilent ResponsePlugin plug-ins were also learned. In the process of sorting out, it is found that there ** Order of precedence ** are Soul plug-ins, and many pre-plug-in operations have been done before the DividePlugin plug-in, which includes the topics ** Rate LimiterPlugin ** we analyzed in this chapter (one of them).</p><h2 id="learn-to-use" tabindex="-1"><a class="header-anchor" href="#learn-to-use" aria-hidden="true">#</a> Learn to use</h2><h3 id="read-the-official-documents-to-have-a-general-understanding-of-it" tabindex="-1"><a class="header-anchor" href="#read-the-official-documents-to-have-a-general-understanding-of-it" aria-hidden="true">#</a> Read the official documents to have a general understanding of it.</h3><p><a href="https://dromara.org/zh/projects/soul/rate-limiter-plugin/">The rate Limiter plug-in</a></p><p>Through the reading of official documents, we know the ** RateLimiterPlugin ** two core points ** Speed, capacity **.</p><p>The following explanation comes from the official document.</p><ul><li>Capacity: is the maximum number of requests a user is allowed to execute in one second. This is the number of tokens the token bucket can hold.</li><li>Rate: This is how many requests per second you allow the user to execute and any requests that are dropped. This is the fill rate of the token bucket.</li></ul><p>It can be seen that ** RateLimiterPlugin ** the core of current limiting lies in ** Token bucket algorithm ** its implementation.</p><p>PS: There are four common implementations ** Token bucket algorithm ** of the current limiting algorithm, ** Funnel algorithm **, ** Counter (fixed window) algorithm **, ** Sliding window algorithm **. See the corresponding <a href="https://blog.csdn.net/weixin_41846320/article/details/95941361"> blog introduction for details.</a></p><h3 id="initial-use" tabindex="-1"><a class="header-anchor" href="#initial-use" aria-hidden="true">#</a> Initial use</h3><h4 id="enable-the-corresponding-plug-in" tabindex="-1"><a class="header-anchor" href="#enable-the-corresponding-plug-in" aria-hidden="true">#</a> Enable the corresponding plug-in</h4><p>At the Soul gateway ** System Management-Plug-in Management **, change the status to the enabled status. Note that redis related configuration needs to be filled in here. The Soul token bucket is based on redis.</p><p>Why is Soul&#39;s token bucket algorithm based on redis?</p><p>In the case of cluster deployment, the token bucket algorithm of a single machine can not meet the current limiting function in the cluster state.</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e25dd524c294b4f9c227e3f2127757f~tplv-k3u1fbpfcp-watermark.image" alt="" tabindex="0"><figcaption></figcaption></figure><h4 id="add-current-limit-selectors-rules" tabindex="-1"><a class="header-anchor" href="#add-current-limit-selectors-rules" aria-hidden="true">#</a> Add current limit selectors, rules,</h4><p>At the Soul Gateway ** List of plug-ins **, select rate _ limiter to add the rule and selector configuration. If you don&#39;t know how to add it, you can read <a href="https://juejin.cn/post/6922431625230417928"> the matching logic </a> of the selector \\ rule first. <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9cbbc63ed6214aeda8c70f8e34d7c19c~tplv-k3u1fbpfcp-watermark.image" alt=""><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25e67268dd5e4aa9a081a51963a03da8~tplv-k3u1fbpfcp-watermark.image" alt=""> The capacity and rate added here are both 1, mainly to verify whether the plug-in is enabled.</p><h4 id="interface-corresponding-access" tabindex="-1"><a class="header-anchor" href="#interface-corresponding-access" aria-hidden="true">#</a> Interface corresponding access</h4><p>Call <em>http://127.0.0.1:9195/http/test/findByUserId?userId=10</em> to access. When the rate is higher than 1, the following interface returns the result, which means the plug-in is successfully used.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">429</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;You have been restricted, please try again later!&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="source-code-reading-read-the-source-code-with-questions" tabindex="-1"><a class="header-anchor" href="#source-code-reading-read-the-source-code-with-questions" aria-hidden="true">#</a> Source Code Reading Read the source code with questions</h3><h4 id="how-to-ensure-that-the-redis-configuration-takes-effect-immediately-after-the-page-is-modified-and-the-corresponding-redis-connection-in-the-background-is-changed-immediately" tabindex="-1"><a class="header-anchor" href="#how-to-ensure-that-the-redis-configuration-takes-effect-immediately-after-the-page-is-modified-and-the-corresponding-redis-connection-in-the-background-is-changed-immediately" aria-hidden="true">#</a> How to ensure that the redis configuration takes effect immediately after the page is modified, and the corresponding redis connection in the background is changed immediately.</h4><p>The answer is that natural data synchronization is closely related.</p><p>When modifying the configuration of the plug-in, an event notification of plug-in data change is also issued. When combing <a href="https://juejin.cn/post/6920609782349086727"> the overall process </a> of Soul Gateway synchronization data, it has been known that the modified plug-in data not only changes the data in the JVM cache, but also distributes the corresponding plug-in. As shown in the following figure <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9434447ebc674f58b65c26b65f855181~tplv-k3u1fbpfcp-watermark.image" alt="">, for ** RateLimiterPlugin ** the interface that is mainly implemented ** handlePlugin **, what exactly does this corresponding implementation do?</p><p>The specific method is as follows ** Rate LimiterPluginData Handler handlerPlugin **.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerPlugin</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pluginData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Load rate limiting plugin configuration</span>
            <span class="token class-name">RateLimiterConfig</span> rateLimiterConfig <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Check if Redis connection value needs to be reloaded</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> <span class="token operator">!</span>rateLimiterConfig<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LettuceConnectionFactory</span> lettuceConnectionFactory <span class="token operator">=</span> <span class="token function">createLettuceConnectionFactory</span><span class="token punctuation">(</span>rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
                lettuceConnectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RedisSerializationContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> serializationContext <span class="token operator">=</span>
                        <span class="token class-name">RedisSerializationContext</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">newSerializationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashKey</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashValue</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ReactiveRedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reactiveRedisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveRedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lettuceConnectionFactory<span class="token punctuation">,</span> serializationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> reactiveRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are several key points in the above code:</p><p>In the above code, the configuration of the current limiting plug-in and the corresponding redisTemplate instance are put into the corresponding map of the Singleton. INST.</p><p>When the plug-in data is received, judging whether a redis connection instance and a current limiting configuration instance exist, judging whether the current current limiting configuration instance is consistent with the transmitted current limiting instance, if not, considering that the configuration is changed, and re-initializing the current limiting instance and the connection pool instance to be put into the map of the Singleton. INST, Hot deployment of changes to the redis configuration is thus guaranteed.</p><p>The code in the if judgment is encapsulated into a corresponding redis connection pool based on SpringDataRedis.</p><p>The PS: Singleton. INST is a singleton pattern implemented by enumeration.</p><h3 id="how-is-the-current-limiting-plug-in-implemented-at-the-bottom" tabindex="-1"><a class="header-anchor" href="#how-is-the-current-limiting-plug-in-implemented-at-the-bottom" aria-hidden="true">#</a> How is the current limiting plug-in implemented at the bottom?</h3><h4 id="debug-call-chain" tabindex="-1"><a class="header-anchor" href="#debug-call-chain" aria-hidden="true">#</a> Debug call chain</h4><p>** RateLimiterPlugin ** Because of the need to limit the flow of specific rules, it is still implemented ** AbstractSoulPlugin **, and the methods and functions that have been ** An excute of AbstractSoulPlugin ** combed before are still used, so I will not repeat the explanation here. You can watch <a href="https://juejin.cn/post/6921685390982119438"> the Http call process </a>. Deepen the impression of this class.</p><p>The focus of this section is to see what specific ** doexcute ** methods have done.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">final</span> <span class="token class-name">String</span> handle <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">final</span> <span class="token class-name">RateLimiterHandle</span> limiterHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token class-name">RateLimiterHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> redisRateLimiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limiterHandle<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limiterHandle<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token comment">// Return error message with 429 error code</span>
                       exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
                   <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above code, it can be seen that whether the token is successfully obtained is judged by ** redisRateLimiter.isAllowed **. The method is as follows</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RateLimiterResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> replenishRate<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> burstCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;RedisRateLimiter is not initialized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token comment">// Get the Redis key</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//The parameters required for encapsulating the execution of a Lua script. The first parameter is the rate, the second parameter is the capacity, the third parameter is the current 10-digit timestamp, and the fourth parameter is a fixed value of 1, which represents the number of tokens requested.</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scriptArgs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>replenishRate <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> burstCapacity <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//Execute the Lua script</span>
       <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resultFlux <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>script<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> scriptArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> resultFlux<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>longs<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   longs<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token keyword">return</span> longs<span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>results <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   <span class="token comment">//&#39;allowed&#39; indicates the execution result (1 for success)</span>
                   <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">;</span>
                   <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token class-name">RateLimiterResponse</span> rateLimiterResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RateLimiterResponse</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;RateLimiter response:{}&quot;</span><span class="token punctuation">,</span> rateLimiterResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token keyword">return</span> rateLimiterResponse<span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error determining if user allowed from redis:{}&quot;</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="method-get-keys-id" tabindex="-1"><a class="header-anchor" href="#method-get-keys-id" aria-hidden="true">#</a> Method get Keys (ID)</h4><p>This method is to obtain the keys that redis needs to operate. Two types of keys are obtained in the following format:</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55ce72f4e044405fbd3b1461905072f2~tplv-k3u1fbpfcp-watermark.image" alt="" tabindex="0"><figcaption></figcaption></figure><p>The particularly long number in the middle is ** Rule ID **, because the smallest granularity of the current limit is the rule.</p><p>The first timestamp record I ** Timestamp of the last call **</p><p>The second token records that ** The number of tokens remaining after the last call was completed **</p><h4 id="execute-this-script-keys-scriptargs" tabindex="-1"><a class="header-anchor" href="#execute-this-script-keys-scriptargs" aria-hidden="true">#</a> execute(this.script, keys, scriptArgs）</h4><p>Executing the Lua script keys passes the return value of getKeys (ID), and scriptArgs passes the required parameters</p><p>By reading the above code, we know that the specific implementation of the current limit rule is handed over to the specific Lua script.</p><p>PS: It needs to be reminded here that the current limiting algorithm is a token bucket algorithm. There are two general implementations of the token bucket algorithm. One is that a thread continuously generates tokens. When a request comes in, it first obtains tokens from the corresponding queue. However, this token generation method will consume a lot of performance when the threshold is set to be particularly large. Therefore, there is a second token bucket algorithm, The number of tokens is calculated in real time as they are acquired, and soul is based on the second implementation.</p><h4 id="analysis-of-lua-current-limiting-algorithm" tabindex="-1"><a class="header-anchor" href="#analysis-of-lua-current-limiting-algorithm" aria-hidden="true">#</a> Analysis of Lua Current Limiting Algorithm</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- Key to store the remaining token count for the current rule</span>
<span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">-- Key for the timestamp of the last call for the current rule</span>
<span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">-- Rate</span>
<span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- Capacity</span>
<span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- Current timestamp</span>
<span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- Value is 1</span>
<span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">-- Calculate fill time by dividing capacity by rate</span>
<span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate
<span class="token comment">-- Calculate TTL by rounding down fill time * 2</span>
<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">-- Get the current token count</span>
<span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
<span class="token comment">-- Set token count to the configured capacity if it&#39;s not present</span>
 last_tokens <span class="token operator">=</span> capacity
<span class="token keyword">end</span>
<span class="token comment">-- Get the timestamp of the last call</span>
<span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
 last_refreshed <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">end</span>
<span class="token comment">-- Calculate the time difference between the last call and the current call</span>
<span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span>
<span class="token comment">-- Calculate the current remaining token count</span>
<span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">--  Check if there are enough tokens (at least 1) available</span>
<span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">&gt;=</span> requested
<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens
<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">if</span> allowed <span class="token keyword">then</span>
 <span class="token comment">-- Consume one token</span>
 new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested
 allowed_num <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

<span class="token comment">-- Use setex to set the key&#39;s TTL and new value</span>
redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;setex&quot;</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>
redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;setex&quot;</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span>

<span class="token keyword">return</span> <span class="token punctuation">{</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is recommended to understand the role <a href="https://www.cnblogs.com/liuyu7177/p/10918250.html"> of Lua ** KEYS ARGS ** and the understanding </a> of keys [1] and argv [1] in redis Lua.</p><p>The overall logic of the Lua code is still very clear, and I can&#39;t explain it in detail here. The code comments have been completed.</p><p>I have two doubts here.</p><ul><li>Is the calculation of the ** ttl ** parameter multiplied by 2 for fear that it is not an integer? , so the \\ * 2 take the minimum operation?</li><li>Is last _ tokens + (* Rate), where the delta parameter is the subtraction of two ten-bit timestamps, but the rate is generated in seconds, shouldn&#39;t it be last _ tokens + ( (delta/1000)? * deltarate) the core code for the calculation of ** filled_tokens ** parameters?</li></ul>`,55),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","soul_source_learning_18_ratelimiter.html.vue"]]);export{r as default};
