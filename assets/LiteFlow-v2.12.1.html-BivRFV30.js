import{_ as n}from"./qrcode_zsxq-DTovgpZN.js";import{_ as a,c as e,a as i,o as l}from"./app-DmbP3YJY.js";const t={};function p(d,s){return l(),e("div",null,s[0]||(s[0]=[i(`<blockquote><p>“</p><p>LiteFlow是一个开源编排式规则引擎，能够让你的系统逻辑任意编排，可选用脚本书写逻辑，支持多达7种脚本语言，支持丰富的第三方存储的支持，所有的逻辑和规则均可热变更。设计系统和重构系统的神器。</p><p>LiteFlow是Gitee的高star项目，截止到发此文章的时候，Gitee star接近6k大关，Github则拥有2.6Kstar。</p><p>同时LiteFlow也是国内优秀的社区驱动型开源项目，开源3年多，目前已经被各大一线公司应用在核心系统上，据不完全统计，国内将近千余家公司都在使用。特性以及支持度都非常好。社区人数超过5000人。测试用例将近1800个，质量有保障。</p><p>如果你是第一次知道这个项目，可以去官网或相关的主页进行了解：</p><p>项目官网:https://liteflow.cc</p><p>以下文章LiteFlow简称为LF。</p></blockquote><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>LF上一次大版本更新是在4月中旬，发布了v2.12.0。推出了版本特性决策路由。</p><p>这一次，我们正式发布v2.12.1，推出2个大特性，2个大增强。</p><p>希望LF能帮助到更多的开发者，无论你是使用它还是用来学习。我们拥有庞大的社区，近3年多不间断的迭代，已经让LF变成了一款功能完备，生产级别的优秀国产规则引擎框架。</p><h2 id="组件注入型参数特性" tabindex="-1"><a class="header-anchor" href="#组件注入型参数特性"><span>组件注入型参数特性</span></a></h2><p>现在组件的process方法上也可以接受参数了（这个功能仅限于声明式组件），这些个参数通过<code>@LiteflowFact</code>标注，能够自动注入上下文里的数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@LiteflowComponent</span></span>
<span class="line"><span>public class CmpConfig {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @LiteflowMethod(value = LiteFlowMethodEnum.PROCESS, nodeType = NodeTypeEnum.COMMON, nodeId = &quot;a&quot;)</span></span>
<span class="line"><span>    public void processA(NodeComponent bindCmp,</span></span>
<span class="line"><span>                        @LiteflowFact(&quot;user.name&quot;) String name,</span></span>
<span class="line"><span>                        @LiteflowFact(&quot;data1&quot;) String data1) {</span></span>
<span class="line"><span>        //do biz</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做的好处是，如果你拥有很多组件，可以省去每个组件每次要去取到上下文然后再去取数据这一套繁琐的过程。</p><p>并且<code>@LiteflowFact</code>是支持在上下文里进行自动搜索的，无论你有多少个上下文，利用这一特性，无需关心具体上下文，只需要定义你想获取的数据即可。并且这个特性是支持通过简单的点操作符去获取对象深层次的属性的。</p><p>关于这个特性具体请参照官网文档<code>数据上下文-&gt;上下文参数注入</code>这一章。</p><h2 id="支持kotlin脚本语言" tabindex="-1"><a class="header-anchor" href="#支持kotlin脚本语言"><span>支持Kotlin脚本语言</span></a></h2><p>其实LF在脚本语言方面支持的种类绝对是规则引擎里最多的，没有之一。</p><p>这次我们又支持了Kotlin语言，目前总共支持8种脚本语言，你现在可以利用Kotlin语法定义你的业务了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;node id=&quot;s1&quot; type=&quot;script&quot; language=&quot;kotlin&quot;&gt;</span></span>
<span class="line"><span>    import com.yomahub.liteflow.slot.DefaultContext</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fun sum(a: Int, b: Int) = a + b</span></span>
<span class="line"><span>    var a = 2</span></span>
<span class="line"><span>    var b = 3</span></span>
<span class="line"><span>    // 从 bindings 中获取上下文</span></span>
<span class="line"><span>    val defaultContext = bindings[&quot;defaultContext&quot;] as DefaultContext</span></span>
<span class="line"><span>    defaultContext.setData(&quot;s1&quot;, sum(a, b))</span></span>
<span class="line"><span>    println(&quot;Hello Kotlin!&quot;)</span></span>
<span class="line"><span>&lt;/node&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和其他脚本语言一样，kotlin也可以和java进行互通，甚至于可以引入spring的bean进行rpc调用也是可以的。这本质上是LF的底层机制比较完善，和用什么脚本语言无关的。</p><p>关于这个特性具体请参照官网文档<code>脚本组件-&gt;脚本语言种类-&gt;Kotlin脚本引擎</code>。</p><h2 id="决策路由增加namespace" tabindex="-1"><a class="header-anchor" href="#决策路由增加namespace"><span>决策路由增加Namespace</span></a></h2><p>LF在v2.12.0中推出了决策路由特性，但是社区里很多使用了这一特性的同学反映决策路由是全局匹配，如果决策路由一多会影响其性能。虽然我实测下来并不会影响太多。但是决策路由是得有组的概念，在新版本中我们给其增加了一个命名空间的概念。可以在执行的时候指定其命名空间。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;chain name=&quot;r_chain1&quot; namespace=&quot;n1&quot;&gt;</span></span>
<span class="line"><span>  &lt;route&gt;</span></span>
<span class="line"><span>    r1</span></span>
<span class="line"><span>  &lt;/route&gt;</span></span>
<span class="line"><span>  &lt;body&gt;</span></span>
<span class="line"><span>    THEN(b,a);</span></span>
<span class="line"><span>  &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/chain&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;chain name=&quot;r_chain2&quot; namespace=&quot;n1&quot;&gt;</span></span>
<span class="line"><span>  &lt;route&gt;</span></span>
<span class="line"><span>    OR(r1,r2)</span></span>
<span class="line"><span>  &lt;/route&gt;</span></span>
<span class="line"><span>  &lt;body&gt;</span></span>
<span class="line"><span>    THEN(a,b);</span></span>
<span class="line"><span>  &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/chain&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于这个特性具体请参照官网文档<code>决策路由-&gt;决策路由用法</code>。</p><h2 id="数据库支持决策路由特性" tabindex="-1"><a class="header-anchor" href="#数据库支持决策路由特性"><span>数据库支持决策路由特性</span></a></h2><p>新版本在数据库插件中支持决策路由特性了。如果你配置相应的字段，并在数据库赋值，即可开启决策路由特性的使用。并且决策路由本身也是可以被热更新的哦。</p><p>当然对以前的使用方式也是完全无缝兼容的。</p><h2 id="完整更新列表" tabindex="-1"><a class="header-anchor" href="#完整更新列表"><span>完整更新列表</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>特性 #I9K14C 为process方法提供注入型参数特性</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://gitee.com/dromara/liteFlow/issues/I9K14C</span></span>
<span class="line"><span></span></span>
<span class="line"><span>特性 #I9H6GN 支持kotlin脚本语言</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://gitee.com/dromara/liteFlow/issues/I9H6GN</span></span>
<span class="line"><span></span></span>
<span class="line"><span>特性 #I9PVQ7 决策路由中增加namespace，可以执行指定命名空间的决策路由</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://gitee.com/dromara/liteFlow/issues/I9PVQ7</span></span>
<span class="line"><span></span></span>
<span class="line"><span>特性 #I9RPBK 数据库插件支持决策路由特性</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://gitee.com/dromara/liteFlow/issues/I9RPBK</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修复 #I9JDY1 绝对路径模糊匹配，没对windows的路径做支持</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://gitee.com/dromara/liteFlow/issues/I9JDY1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修复 #I9N5K8 在自定义组件后，通过getCmpData 获取data的实体对象，data字段与实体类不匹配是会抛异常</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://gitee.com/dromara/liteFlow/issues/I9N5K8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 Dromara</p><p>Dromara 是由国内顶尖的开源项目作者共同组成的开源社区。提供包括分布式事务，流行工具，企业级认证，微服务RPC，运维监控，Agent监控，分布式日志，调度编排等一系列开源产品、解决方案与咨询、技术支持与培训认证服务。技术栈全面开源共建、 保持社区中立，致力于为全球用户提供微服务云原生解决方案。让参与的每一位开源爱好者，体会到开源的快乐。</p><p>Dromara开源社区目前拥有10+GVP项目，总star数量超过十万，构建了上万人的开源社区，有成千上万的个人及团队在使用Dromara社区的开源项目。</p><p><strong>欢迎大家来到知识星球和我互动</strong></p><p><img src="`+n+'" alt=""></p>',31)]))}const o=a(t,[["render",p],["__file","LiteFlow-v2.12.1.html.vue"]]),m=JSON.parse('{"path":"/zh/blog/LiteFlow-v2.12.1.html","title":"规则引擎LiteFlow发布v2.12.1版本，有多猛用过才知道","lang":"zh-CN","frontmatter":{"title":"规则引擎LiteFlow发布v2.12.1版本，有多猛用过才知道","author":"LF","date":"2024-06-04T00:00:00.000Z","cover":"/assets/img/qrcode_zsxq.webp","head":[["meta",{"name":"博客"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://vuepress-theme-hope-docs-demo.netlify.app/blog/LiteFlow-v2.12.1.html"}],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/blog/LiteFlow-v2.12.1.html"}],["meta",{"property":"og:title","content":"规则引擎LiteFlow发布v2.12.1版本，有多猛用过才知道"}],["meta",{"property":"og:description","content":"“ LiteFlow是一个开源编排式规则引擎，能够让你的系统逻辑任意编排，可选用脚本书写逻辑，支持多达7种脚本语言，支持丰富的第三方存储的支持，所有的逻辑和规则均可热变更。设计系统和重构系统的神器。 LiteFlow是Gitee的高star项目，截止到发此文章的时候，Gitee star接近6k大关，Github则拥有2.6Kstar。 同时LiteF..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/qrcode_zsxq.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-29T01:43:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/qrcode_zsxq.webp"}],["meta",{"name":"twitter:image:alt","content":"规则引擎LiteFlow发布v2.12.1版本，有多猛用过才知道"}],["meta",{"property":"article:author","content":"LF"}],["meta",{"property":"article:published_time","content":"2024-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-29T01:43:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"规则引擎LiteFlow发布v2.12.1版本，有多猛用过才知道\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/qrcode_zsxq.webp\\"],\\"datePublished\\":\\"2024-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-29T01:43:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LF\\"}]}"]],"description":"“ LiteFlow是一个开源编排式规则引擎，能够让你的系统逻辑任意编排，可选用脚本书写逻辑，支持多达7种脚本语言，支持丰富的第三方存储的支持，所有的逻辑和规则均可热变更。设计系统和重构系统的神器。 LiteFlow是Gitee的高star项目，截止到发此文章的时候，Gitee star接近6k大关，Github则拥有2.6Kstar。 同时LiteF..."},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"组件注入型参数特性","slug":"组件注入型参数特性","link":"#组件注入型参数特性","children":[]},{"level":2,"title":"支持Kotlin脚本语言","slug":"支持kotlin脚本语言","link":"#支持kotlin脚本语言","children":[]},{"level":2,"title":"决策路由增加Namespace","slug":"决策路由增加namespace","link":"#决策路由增加namespace","children":[]},{"level":2,"title":"数据库支持决策路由特性","slug":"数据库支持决策路由特性","link":"#数据库支持决策路由特性","children":[]},{"level":2,"title":"完整更新列表","slug":"完整更新列表","link":"#完整更新列表","children":[]}],"git":{"createdTime":1724895830000,"updatedTime":1724895830000,"contributors":[{"name":"itanxyu","username":"itanxyu","email":"itanxy@126.com","commits":1,"url":"https://github.com/itanxyu"}]},"readingTime":{"minutes":5.04,"words":1513},"filePathRelative":"zh/blog/LiteFlow-v2.12.1.md","localizedDate":"2024年6月4日","autoDesc":true,"excerpt":"<blockquote>\\n<p>“</p>\\n<p>LiteFlow是一个开源编排式规则引擎，能够让你的系统逻辑任意编排，可选用脚本书写逻辑，支持多达7种脚本语言，支持丰富的第三方存储的支持，所有的逻辑和规则均可热变更。设计系统和重构系统的神器。</p>\\n<p>LiteFlow是Gitee的高star项目，截止到发此文章的时候，Gitee star接近6k大关，Github则拥有2.6Kstar。</p>\\n<p>同时LiteFlow也是国内优秀的社区驱动型开源项目，开源3年多，目前已经被各大一线公司应用在核心系统上，据不完全统计，国内将近千余家公司都在使用。特性以及支持度都非常好。社区人数超过5000人。测试用例将近1800个，质量有保障。</p>\\n<p>如果你是第一次知道这个项目，可以去官网或相关的主页进行了解：</p>\\n<p>项目官网:https://liteflow.cc</p>\\n<p>以下文章LiteFlow简称为LF。</p>\\n</blockquote>"}');export{o as comp,m as data};
