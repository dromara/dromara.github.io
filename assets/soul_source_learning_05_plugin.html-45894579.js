import{_ as n,a as s}from"./02-a67312d3.js";import{_ as a,o as t,c as e,f as p}from"./app-4aee1e45.js";const o={},c=p('<h1 id="plug-in-chain-summary" tabindex="-1"><a class="header-anchor" href="#plug-in-chain-summary" aria-hidden="true">#</a> Plug-in chain summary</h1><p>Start with a class diagram:</p><figure><img src="'+n+`" alt="plugin diagram" tabindex="0"><figcaption>plugin diagram</figcaption></figure><p>Two of the most basic plug-in classes are:</p><ul><li><p>SoulPlugin: Defines the interface of the plug-in responsibility. The key method <code>execute()</code> is called by the upper layer. <code>skip()</code> The method can cause some plug-ins to be skipped in some requests.</p></li><li><p>AbstractPlugin: An abstract class that implements an interface <code>execute()</code>, defines a common execution process, and uses the design pattern of the template method to provide <code>doExecute()</code> an abstract method for the implementation class to write its own logic.</p></li></ul><h2 id="abstractsoulplugin" tabindex="-1"><a class="header-anchor" href="#abstractsoulplugin" aria-hidden="true">#</a> AbstractSoulPlugin</h2><p>Specific analysis of the <code>execute()</code> following <code>AbstractSoulPlugin</code> categories:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> pluginName <span class="token operator">=</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainPluginData</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// If pluginData.getEnabled() is false, it will skip to the next plugin, only a few plugins will enter this condition (DividePlugin, AlibabaDubboPlugin, etc.)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pluginData <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pluginData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Get all selectors on the plugin</span>
    <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectors <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainSelectorData</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>selectors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">CheckUtils</span><span class="token punctuation">.</span><span class="token function">checkSelector</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Check whether the request path in the context matches the selector and get the only matching selector data</span>
    <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selectorData <span class="token operator">=</span> <span class="token function">matchSelector</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PluginEnum</span><span class="token punctuation">.</span><span class="token constant">WAF</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token class-name">CheckUtils</span><span class="token punctuation">.</span><span class="token function">checkSelector</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getLoged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} selector success match , selector name :{}&quot;</span><span class="token punctuation">,</span> pluginName<span class="token punctuation">,</span> selectorData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Gets the individual resource rules in the selector</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainRuleData</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PluginEnum</span><span class="token punctuation">.</span><span class="token constant">WAF</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token class-name">CheckUtils</span><span class="token punctuation">.</span><span class="token function">checkRule</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">RuleData</span> rule<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">SelectorTypeEnum</span><span class="token punctuation">.</span><span class="token constant">FULL_FLOW</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rule <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rules<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Match the path to obtain a unique rule</span>
      rule <span class="token operator">=</span> <span class="token function">matchRule</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">CheckUtils</span><span class="token punctuation">.</span><span class="token function">checkRule</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getLoged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} rule success match ,rule name :{}&quot;</span><span class="token punctuation">,</span> pluginName<span class="token punctuation">,</span> rule<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Execute methods of subclasses</span>
    <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> selectorData<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Execute the next plug-in on the plug-in chain</span>
  <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Through code analysis, some conclusions can be drawn:</p><ul><li>Execute () has two logics: one is the matching of the request path with the selector and the rule, which finally confirms a unique rule and calls the subclass doExecute (); The second is to execute the next plug-in in the plug-in chain.</li><li>The execute () actually abstracts a set of rule matching logic, which is used by all the &quot;forwarding type&quot; plug-ins. Currently, I know the forwarding type plug-ins are <code>DividePlugin</code> (HTTP request) and <code>AlibabaDubboPlugin</code> (dubbo request). Other types of plug-ins that do not override the execute () method will go directly to the next plug-in.</li></ul><h2 id="soulpluginchain" tabindex="-1"><a class="header-anchor" href="#soulpluginchain" aria-hidden="true">#</a> SoulPluginChain</h2><p>Another point here is the formation and chain call of the plug-in chain. Let&#39;s analyze <code>SoulPluginChain</code> this part:</p><figure><img src="`+s+`" alt="plugin02" tabindex="0"><figcaption>plugin02</figcaption></figure><p>The SoulPluginChain interface also defines <code>execute()</code> methods for the caller to use, and its only subclass, DefaultSoulPluginChain, implements chained calls:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// plugins contains all plugins loaded by the gateway</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> plugins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Each time the execute() method is called, the index index increases and is called to the next plug-in</span>
      <span class="token class-name">SoulPlugin</span> plugin <span class="token operator">=</span> plugins<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Determine whether the current plug-in needs to be skipped based on the context</span>
      <span class="token class-name">Boolean</span> skip <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>skip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s curious <code>plugins</code> to see where this list of plug-ins comes from. Here&#39;s an explanation. DefaultSoulPluginChain is a static inner class of SoulWebHandler. Is <code>plugins</code> an attribute in the Soul Web Handle:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SoulWebHandler</span> <span class="token keyword">implements</span> <span class="token class-name">WebHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> plugins<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SoulWebHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>plugins <span class="token operator">=</span> plugins<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

  	<span class="token annotation punctuation">@Override</span>
  	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// ...</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSoulPluginChain</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">doOnSuccess</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> startTimer<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>time <span class="token operator">-&gt;</span> <span class="token class-name">MetricsTrackerFacade</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">histogramObserveDuration</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSoulPluginChain</span> <span class="token keyword">implements</span> <span class="token class-name">SoulPluginChain</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So where did the <code>plugins</code> SoulWeb Handler come from? You can continue to trace back to where its constructor was called:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoulConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;webHandler&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">SoulWebHandler</span> <span class="token function">soulWebHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> pluginList <span class="token operator">=</span> plugins<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">emptyList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> soulPlugins <span class="token operator">=</span> pluginList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">SoulPlugin</span><span class="token operator">::</span><span class="token function">getOrder</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        soulPlugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>soulPlugin <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;loader plugin:[{}] [{}]&quot;</span><span class="token punctuation">,</span> soulPlugin<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> soulPlugin<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SoulWebHandler</span><span class="token punctuation">(</span>soulPlugins<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can be seen that the writing <code>plugins</code> is started by means of Spring Bean, that is, when the container starts, all plug-ins are loaded. Here, the entry parameter is used <code>ObjectProvider</code> to lazily load all beans of the SoulPlugin type (if none of them are used, no error will be reported) and inject them into the SoulWebHandler.</p><p>** There&#39;s a little hole to watch out for! **</p><p>All plug-ins, including DividePlugin, AlibabaDubboPlugin, etc., are configured by the XX PluginConfiguration class in their respective <code>soul-spring-boot-starter-plugin-xx</code> projects to register their own plug-ins as beans, similar to the following example:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DividePluginConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SoulPlugin</span> <span class="token function">dividePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DividePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Therefore, in the gateway project <code>soul-bootstrap</code>, if you need to use a plug-in, you not only need to open the plug-in in the management background, but also need to confirm whether there is a dependency of the <code>soul-spring-boot-starter-plugin-xx</code> relevant plug-in in the following <code>soul-bootstrap</code> <code>pom.xml</code>, for example:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dromara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>soul-spring-boot-starter-plugin-divide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have a comment here or it doesn&#39;t exist, don&#39;t expect to see it on the plugin chain..</p><h2 id="plug-in-project-structure" tabindex="-1"><a class="header-anchor" href="#plug-in-project-structure" aria-hidden="true">#</a> Plug-in project structure</h2><p>Finally, briefly describe the functions of each plug-in project:</p><ol><li><p>The first is the spring bean startup class project just mentioned, listing a general idea:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>soul-spring-boot-starter-plugin-alibaba-dubbo
soul-spring-boot-starter-plugin-apache-dubbo
soul-spring-boot-starter-plugin-context-path
soul-spring-boot-starter-plugin-divide
soul-spring-boot-starter-plugin-global
soul-spring-boot-starter-plugin-httpclient
soul-spring-boot-starter-plugin-hystrix
soul-spring-boot-starter-plugin-monitor
soul-spring-boot-starter-plugin-ratelimiter
soul-spring-boot-starter-plugin-resilience4j
soul-spring-boot-starter-plugin-rewrite
soul-spring-boot-starter-plugin-sentinel
soul-spring-boot-starter-plugin-sign
soul-spring-boot-starter-plugin-sofa
soul-spring-boot-starter-plugin-springcloud
soul-spring-boot-starter-plugin-tars
soul-spring-boot-starter-plugin-waf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Their main functions have just been mentioned, registering their own SoulPlugin subclasses as spring beans, and registering spring beans to the PluginData Handler interface called in AbstractSoulPlugin. Provide its own implementation subclass, such as DividePluginDataHandler.</p></li><li><p>Specific plug-in class project:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>soul-plugin-alibaba-dubbo
soul-plugin-apache-dubbo
soul-plugin-api
soul-plugin-base
soul-plugin-context-path
soul-plugin-divide
soul-plugin-global
soul-plugin-httpclient
soul-plugin-hystrix
soul-plugin-monitor
soul-plugin-ratelimiter
soul-plugin-resilience4j
soul-plugin-rewrite
soul-plugin-sentinel
soul-plugin-sign
soul-plugin-sofa
soul-plugin-springcloud
soul-plugin-tars
soul-plugin-waf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Take the <code>soul-plugin-divide</code> DividePlugin and DividePluginDataHandler mentioned just now as examples. And the project also has node information cache manager Upstream Cache Manager, load balancing strategy class LoadBalance and so on.</p></li></ol><h1 id="divideplugin" tabindex="-1"><a class="header-anchor" href="#divideplugin" aria-hidden="true">#</a> DividePlugin</h1><p>The function of DividePlugin is to match Http requests. Since there are Http requests, there are naturally forwarding downstream and returning responses. So here we will analyze three plug-ins: DividePlugin, WebClientPlugin, WebClientResponsePlugin.</p><p>Let&#39;s start with that implementation in <code>doExecute()</code> DividePlugin, where I just keep the core point:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">DivideRuleHandle</span> ruleHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DivideRuleHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Get the cluster of service nodes in the cache by selector ID</span>
  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList <span class="token operator">=</span> <span class="token class-name">UpstreamCacheManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findUpstreamListBySelectorId</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Call the load balancing method and pass in the policy type to get a unique node</span>
  <span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">=</span> <span class="token class-name">LoadBalanceUtils</span><span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getLoadBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Get the real url of the node and put it in the exchange context</span>
  <span class="token class-name">String</span> domain <span class="token operator">=</span> <span class="token function">buildDomain</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> realURL <span class="token operator">=</span> <span class="token function">buildRealURL</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> soulContext<span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
  exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_URL</span><span class="token punctuation">,</span> realURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Continue to call the next plug-in</span>
  <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, after executing the DividePlugin <code>doExecute()</code> method, we already have the real path of the downstream service node in the ServerWeb Exchange context, and we just need to request it. But don&#39;t worry, the load balancing strategy here is also the key point, and then analyze.</p><h2 id="load-balancing" tabindex="-1"><a class="header-anchor" href="#load-balancing" aria-hidden="true">#</a> Load balancing</h2><p>How to execute the load balancing of Soul Gateway involves not only various strategies (hasn, random, polling), but also the concept of &quot;weight score&quot;. The specific configuration of the management background is as follows:</p><p>待补，文章内部有报错</p><p>待补，文章内部有报错</p><p>待补，文章内部有报错</p><p>After showing the background configuration, let&#39;s take a look at the code implementation of each strategy.</p><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> Hash</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DivideUpstream</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DivideUpstream</span> address <span class="token operator">:</span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Each node *VIRTUAL_NODE_NUM(default 5) to make the hash more uniform</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">VIRTUAL_NODE_NUM</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">long</span> addressHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&quot;SOUL-&quot;</span> <span class="token operator">+</span> address<span class="token punctuation">.</span><span class="token function">getUpstreamUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-HASH-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>addressHash<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Obtain a hash value from the current ip address and compare treemap(ordered) to find a location greater than the hash value</span>
  <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> lastRing <span class="token operator">=</span> treeMap<span class="token punctuation">.</span><span class="token function">tailMap</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//  As long as the service node does not increase or decrease, the node obtained by the same ip address can remain unchanged</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastRing<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> lastRing<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastRing<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> treeMap<span class="token punctuation">.</span><span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The load balancing of the hash algorithm does not use the concept of &quot;weight score&quot;, that is to say, for each unknown IP, the probability of each node being accessed is the same. (Of course, multiple calls to the same IP will only access the same node.)</p><h2 id="randomloadbalance" tabindex="-1"><a class="header-anchor" href="#randomloadbalance" aria-hidden="true">#</a> RandomLoadBalance</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DivideUpstream</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Total number</span>
  <span class="token keyword">int</span> length <span class="token operator">=</span> upstreamList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Total weight</span>
  <span class="token keyword">int</span> totalWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// Whether the weights are the same</span>
  <span class="token keyword">boolean</span> sameWeight <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> weight <span class="token operator">=</span> upstreamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Cumulative total weight</span>
    totalWeight <span class="token operator">+=</span> weight<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sameWeight <span class="token operator">&amp;&amp;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">&amp;&amp;</span> weight <span class="token operator">!=</span> upstreamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Calculate whether the ownership weight is the same</span>
      sameWeight <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>totalWeight <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sameWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If the weights are not the same and the weights are greater than 0, random by the total weights</span>
<span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token constant">RANDOM</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>totalWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// and determine which segment the random value falls on</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">:</span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      offset <span class="token operator">-=</span> divideUpstream<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> divideUpstream<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Equally random if the weight is the same or if the weight is 0</span>
  <span class="token keyword">return</span> upstreamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">RANDOM</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the rule is used <code>random</code>, all the node weights are accumulated and the number is obtained randomly, depending on the weight fragment of the node; If the score is 0 or the same, it is straightforward to randomize the cluster length.</p><h2 id="roundrobinloadbalance" tabindex="-1"><a class="header-anchor" href="#roundrobinloadbalance" aria-hidden="true">#</a> RoundRobinLoadBalance</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DivideUpstream</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> key <span class="token operator">=</span> upstreamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUpstreamUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">WeightedRoundRobin</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> methodWeightMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    methodWeightMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map <span class="token operator">=</span> methodWeightMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> totalWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> maxCurrent <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">DivideUpstream</span> selectedInvoker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token class-name">WeightedRoundRobin</span> selectedWRR <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DivideUpstream</span> upstream <span class="token operator">:</span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> rKey <span class="token operator">=</span> upstream<span class="token punctuation">.</span><span class="token function">getUpstreamUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Retrieves the node information in the cache</span>
    <span class="token class-name">WeightedRoundRobin</span> weightedRoundRobin <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> weight <span class="token operator">=</span> upstream<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>weightedRoundRobin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      weightedRoundRobin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeightedRoundRobin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      weightedRoundRobin<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>rKey<span class="token punctuation">,</span> weightedRoundRobin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>weight <span class="token operator">!=</span> weightedRoundRobin<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      weightedRoundRobin<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Here is the first key: the score in the cache increases the weight score of the current node</span>
    <span class="token keyword">long</span> cur <span class="token operator">=</span> weightedRoundRobin<span class="token punctuation">.</span><span class="token function">increaseCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    weightedRoundRobin<span class="token punctuation">.</span><span class="token function">setLastUpdate</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Select the node with a high cache score</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> maxCurrent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maxCurrent <span class="token operator">=</span> cur<span class="token punctuation">;</span>
      selectedInvoker <span class="token operator">=</span> upstream<span class="token punctuation">;</span>
      selectedWRR <span class="token operator">=</span> weightedRoundRobin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    totalWeight <span class="token operator">+=</span> weight<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>updateLock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> upstreamList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> updateLock<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">WeightedRoundRobin</span><span class="token punctuation">&gt;</span></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
      newMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> now <span class="token operator">-</span> item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> recyclePeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>
      methodWeightMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      updateLock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedInvoker <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Here is the second key: the score in the cache, reducing the total node weight score</span>
    selectedWRR<span class="token punctuation">.</span><span class="token function">sel</span><span class="token punctuation">(</span>totalWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> selectedInvoker<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> upstreamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This algorithm is a bit complicated. Let me explain the core aspect of calculating weights:</p><ul><li>Two nodes with a score of 2 and 100 respectively enter, and each of them is kept in the cache, with the score starting from 0.</li><li>After the for loop, the scores of the two nodes in the cache will increase based on themselves. Assuming that the following steps are not performed, the cache will be 2 and 100 for the first time, 4 and 200 for the second time, and so on.</li><li>The third key step is to select the node cache with the highest score and take &quot;punishment&quot; measures to reduce the cumulative score of all nodes, that is, 102.</li></ul><p>According to the steps of this algorithm, nodes that have not been selected, as &quot;growth rewards&quot;, will continue to increase on their own basis. The selected node, as a &quot;penalty,&quot; reduces the sum of the weights of the other nodes.</p><p>It can be predicted that a node with a small weight will not be selected until a long time later. However, at that moment, it will be punished with great strength, which will lead to a long accumulation of strength once it returns to the pre-liberation period. For nodes with large weight scores, the penalty for being selected each time is very small. Even if the score is too low to be selected after many times, his reward score (itself) is particularly high, and one increase far surpasses other nodes.</p><h2 id="webclientplugin" tabindex="-1"><a class="header-anchor" href="#webclientplugin" aria-hidden="true">#</a> WebClientPlugin</h2><p>After the DividePlugin plug-in is called, the downstream service node path is determined, and then the Web ClientPlugin plug-in comes into play. It implements the SoulPlugin interface directly and implements the <code>execute()</code> methods (keeping only the core code):</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> urlPath <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Request type: Get request, orPost request, etc</span>
  <span class="token class-name">HttpMethod</span> method <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Build a shell of the request object and inject the request type and URL</span>
  <span class="token class-name">WebClient<span class="token punctuation">.</span>RequestBodySpec</span> requestBodySpec <span class="token operator">=</span> webClient<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">handleRequestBody</span><span class="token punctuation">(</span>requestBodySpec<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleRequestBody</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>RequestBodySpec</span> requestBodySpec<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span>
                                         <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> requestBodySpec<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>httpHeaders <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Add the request header in context... Later is also to add some attributes, do not go into details</span>
    httpHeaders<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    httpHeaders<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token function">buildMediaType</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromDataBuffers</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// Start asynchronous http calls to downstream services</span>
    <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// Callback receives the return value</span>
    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">doNext</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Here is an asynchronous callback method that works in another thread</span>
<span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doNext</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ClientResponse</span> res<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// Continue to complete the remaining plug-in chain calls</span>
  <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Take a quick look at <code>handleRequestBody()</code> the implementation of this method in <code>exchange()</code>, here are the key Http calls:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DefaultWebClient</span> <span class="token keyword">implements</span> <span class="token class-name">WebClient</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClientResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClientRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inserter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>
                             <span class="token function">initRequestBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inserter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>
                             <span class="token function">initRequestBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Here is the critical call, which will go to spring-web-reactive</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> exchangeFunction<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">checkpoint</span><span class="token punctuation">(</span><span class="token string">&quot;Request to &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpMethod<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">+</span> <span class="token string">&quot; [DefaultWebClient]&quot;</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token constant">NO_HTTP_CLIENT_RESPONSE_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To sum up, the processing of Web ClientPlugin will call the downstream service asynchronously, wait for the response, and then execute the subsequent plug-in chain call in another thread.</p><h2 id="webclientresponseclient" tabindex="-1"><a class="header-anchor" href="#webclientresponseclient" aria-hidden="true">#</a> WebClientResponseClient</h2><p>Finally, the plug-in chain goes to the Web ClientResponseClient link to encapsulate the response information:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Gets the response information stored in the context</span>
    <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClientResponse</span> clientResponse <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_ATTR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">)</span>
        <span class="token operator">||</span> response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_GATEWAY</span>
        <span class="token operator">||</span> response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWarp</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">GATEWAY_TIMEOUT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWarp</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Various assembly</span>
    response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asHttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>clientResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyExtractors</span><span class="token punctuation">.</span><span class="token function">toDataBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),l=[c];function i(u,k){return t(),e("div",null,l)}const m=a(o,[["render",i],["__file","soul_source_learning_05_plugin.html.vue"]]);export{m as default};
