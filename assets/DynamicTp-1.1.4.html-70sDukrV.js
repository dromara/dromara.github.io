import{_ as e}from"./DynamicTp-1.1.4-4-DvwVo5wR.js";import{_ as n,c as i,a,o as r}from"./app-DDc8sQ0r.js";const p="/assets/img/news/DynamicTp-1.1.4-1.png",o="/assets/img/news/DynamicTp-1.1.4-2.png",s="/assets/img/news/DynamicTp-1.1.4-3.jpg",l={};function c(m,t){return r(),i("div",null,t[0]||(t[0]=[a('<h2 id="dynamictp-简介" tabindex="-1"><a class="header-anchor" href="#dynamictp-简介"><span>DynamicTp 简介</span></a></h2><p>DynamicTp 是一个基于配置中心实现的轻量级动态线程池监控管理工具，主要功能可以总结为动态调参、通知报警、运行监控、三方包线程池管理等几大类。</p><h2 id="dynamictp-特性" tabindex="-1"><a class="header-anchor" href="#dynamictp-特性"><span>DynamicTp 特性</span></a></h2><ul><li><strong>代码零侵入</strong>：我们改变了线程池以往的使用姿势，所有配置均放在配置中心，服务启动时会从配置中心拉取配置生成线程池对象放到 Spring 容器中，使用时直接从 Spring 容器中获取，对业务代码零侵入</li><li><strong>通知告警</strong>：提供多种报警维度（配置变更通知、活性报警、容量阈值报警、拒绝触发报警、任务执行或等待超时报警），已支持企业微信、钉钉、飞书、邮件报警，同时提供 SPI 接口可自定义扩展实现</li><li><strong>运行监控</strong>：定时采集线程池指标数据，支持通过 MicroMeter、JsonLog 日志输出、Endpoint 三种方式，可通过 SPI 接口自定义扩展实现</li><li><strong>任务增强</strong>：提供任务包装功能，实现 TaskWrapper 接口即可，如 MdcTaskWrapper、TtlTaskWrapper、SwTraceTaskWrapper，可以支持线程池上下文信息传递</li><li><strong>多配置中心支持</strong>：基于主流配置中心实现线程池参数动态调整，实时生效，已支持 Nacos、Apollo、Zookeeper、Consul、Etcd、Polaris、ServiceComb，同时也提供 SPI 接口可自定义扩展实现</li><li><strong>中间件线程池管理</strong>：集成管理常用第三方组件的线程池，已集成 Tomcat、Jetty、Undertow、Dubbo、RocketMq、Hystrix、Grpc、Motan、Okhttp3、Brpc、Tars、SofaRpc、RabbitMq 等组件的线程池管理（调参、监控报警）</li><li><strong>轻量简单</strong>：基于 SpringBoot 实现，引入 starter，接入只需简单 4 步就可完成，顺利 3 分钟搞定</li><li><strong>多模式</strong>：提供了增强线程池 DtpExecutor，IO 密集型场景使用的线程池 EagerDtpExecutor，调度线程池 ScheduledDtpExecutor，有序线程池 OrderedDtpExecutor，可以根据业务场景选择合适的线程池</li><li><strong>兼容性</strong>：JUC 普通线程池和 Spring 中的 ThreadPoolTaskExecutor 也可以被框架管理，@Bean 定义时加 @DynamicTp 注解即可</li><li><strong>可靠性</strong>：框架提供的线程池实现 Spring 生命周期方法，可以在 Spring 容器关闭前尽可能多的处理队列中的任务</li><li><strong>高可扩展</strong>：框架核心功能都提供 SPI 接口供用户自定义个性化实现（配置中心、配置文件解析、通知告警、监控数据采集、任务包装等等）</li><li><strong>线上大规模应用</strong>：参考美团线程池实践，美团内部已经有该理论成熟的应用经验</li></ul><h2 id="v1-1-4-发版记录" tabindex="-1"><a class="header-anchor" href="#v1-1-4-发版记录"><span>v1.1.4 发版记录</span></a></h2><ul><li><p>支持 Spring 项目，SpringBoot 相关特性只在 starter 模块引入，@dragon-zhang</p></li><li><p>添加 jvmti 黑科技模块，方便集成管理各种三方包线程池，@dragon-zhang</p></li><li><p>升级 VariableLinkedBlockingQueue 到 jdk1.8 的 LinkedBlockingQueue 的实现，@yanhom</p></li><li><p>添加插件机制，基于此可以对框架做自定义开发扩展，@WindSearcher</p></li><li><p>细化告警配置，支持不同告警项配置不同接受人，@kyao</p></li><li><p>通知告警平台支持云之家，@chunhui_lu</p></li><li><p>支持 SpringBoot 1.x，@yanhom</p></li><li><p>第三方线程池（tomcat、undertow、dubbo、rocketmq、okhttp3 等等）支持 run_timeout、queue_timeout、reject 告警，@kyao，@yanhom <img src="'+p+'" alt=""></p></li><li><p>提供 Aware 扩展，可以扩展自定义线程池执行过程，@kyao</p></li><li><p>监控数据新增线程池别名，@zhifei</p></li></ul><h4 id="bugfix" tabindex="-1"><a class="header-anchor" href="#bugfix"><span>Bugfix</span></a></h4><ul><li>修复 Tomcat 高低版本兼容性报错问题，@yanhom</li><li>修复其他 agent 增强线程池后，强转 DtpRunnable 失败的问题，@yanhom</li><li>修复企微告警无@提醒的问题，@yanhom</li><li>修复企微告警配置多个接受人不能正确@的问题，@KamToHung</li><li>修复钉钉告警不能@所有人问题，@chenan</li><li>修复因 Bean 初始化顺序不确定导致的 ApplicationContextHolder npe 问题，@yanhom</li><li>修复修复拒绝策略为 CallerRunsPolicy 时，MdcRunnable 会删除主线程 mdc 信息的问题，@kyao</li></ul><h4 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize"><span>Optimize</span></a></h4><ul><li>优化 dtp 内部 spi 的使用，统一封装管理，@peachyy</li><li>部分代码优化重构，@yanhom，@KamToHung，@dragon-zhang，@kyao</li><li>告警信息优化，trace 信息可以自己扩展，集成内部 ELK 等平台，@yanhom</li></ul><p><img src="'+o+'" alt=""></p><h2 id="项目地址" tabindex="-1"><a class="header-anchor" href="#项目地址"><span>项目地址</span></a></h2><p><strong>官网</strong>：https://dynamictp.cn<sup>[1]</sup></p><p><strong>gitee 地址</strong>：https://gitee.com/dromara/dynamic-tp<sup>[2]</sup></p><p><strong>github 地址</strong>：https://github.com/dromara/dynamic-tp<sup>[3]</sup></p><h2 id="加入社群" tabindex="-1"><a class="header-anchor" href="#加入社群"><span>加入社群</span></a></h2><p><strong>看到这儿，方便的话给项目一个 star，你的支持是我们前进的动力！</strong></p><p>使用过程中有任何问题，或者对项目有什么想法或者建议，可以加入社群，跟群友一起交流讨论。</p><p>新增分群 4，可以自行扫码加入，或者加我微信拉入其他群！</p><img src="'+s+'" height="340"><br><img src="'+e+'" height="340"><p>https://dynamictp.cn</p><p>https://gitee.com/dromara/dynamic-tp</p><p>https://github.com/dromara/dynamic-tp</p>',25)]))}const d=n(l,[["render",c],["__file","DynamicTp-1.1.4.html.vue"]]),y=JSON.parse('{"path":"/zh/news/DynamicTp-1.1.4.html","title":"动态线程池框架DynamicTp v1.1.4大版本发布，新增若干实用特性","lang":"zh-CN","frontmatter":{"title":"动态线程池框架DynamicTp v1.1.4大版本发布，新增若干实用特性","author":"DynamicTp","date":"2023-09-26T00:00:00.000Z","cover":"/assets/img/news/DynamicTp-1.1.4-cover.png","head":[["meta",{"name":"新闻"}],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/news/DynamicTp-1.1.4.html"}],["meta",{"property":"og:title","content":"动态线程池框架DynamicTp v1.1.4大版本发布，新增若干实用特性"}],["meta",{"property":"og:description","content":"DynamicTp 简介 DynamicTp 是一个基于配置中心实现的轻量级动态线程池监控管理工具，主要功能可以总结为动态调参、通知报警、运行监控、三方包线程池管理等几大类。 DynamicTp 特性 代码零侵入：我们改变了线程池以往的使用姿势，所有配置均放在配置中心，服务启动时会从配置中心拉取配置生成线程池对象放到 Spring 容器中，使用时直接从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/DynamicTp-1.1.4-cover.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T05:33:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/DynamicTp-1.1.4-cover.png"}],["meta",{"name":"twitter:image:alt","content":"动态线程池框架DynamicTp v1.1.4大版本发布，新增若干实用特性"}],["meta",{"property":"article:author","content":"DynamicTp"}],["meta",{"property":"article:published_time","content":"2023-09-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T05:33:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态线程池框架DynamicTp v1.1.4大版本发布，新增若干实用特性\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/DynamicTp-1.1.4-1.png\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/DynamicTp-1.1.4-2.png\\"],\\"datePublished\\":\\"2023-09-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T05:33:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DynamicTp\\"}]}"]],"description":"DynamicTp 简介 DynamicTp 是一个基于配置中心实现的轻量级动态线程池监控管理工具，主要功能可以总结为动态调参、通知报警、运行监控、三方包线程池管理等几大类。 DynamicTp 特性 代码零侵入：我们改变了线程池以往的使用姿势，所有配置均放在配置中心，服务启动时会从配置中心拉取配置生成线程池对象放到 Spring 容器中，使用时直接从..."},"headers":[{"level":2,"title":"DynamicTp 简介","slug":"dynamictp-简介","link":"#dynamictp-简介","children":[]},{"level":2,"title":"DynamicTp 特性","slug":"dynamictp-特性","link":"#dynamictp-特性","children":[]},{"level":2,"title":"v1.1.4 发版记录","slug":"v1-1-4-发版记录","link":"#v1-1-4-发版记录","children":[]},{"level":2,"title":"项目地址","slug":"项目地址","link":"#项目地址","children":[]},{"level":2,"title":"加入社群","slug":"加入社群","link":"#加入社群","children":[]}],"git":{"createdTime":1698039180000,"updatedTime":1698039180000,"contributors":[{"name":"Cici","username":"Cici","email":"1901177100@qq.com","commits":1,"url":"https://github.com/Cici"}]},"readingTime":{"minutes":4.01,"words":1203},"filePathRelative":"zh/news/DynamicTp-1.1.4.md","localizedDate":"2023年9月26日","autoDesc":true,"excerpt":"<h2>DynamicTp 简介</h2>\\n<p>DynamicTp 是一个基于配置中心实现的轻量级动态线程池监控管理工具，主要功能可以总结为动态调参、通知报警、运行监控、三方包线程池管理等几大类。</p>\\n<h2>DynamicTp 特性</h2>\\n<ul>\\n<li><strong>代码零侵入</strong>：我们改变了线程池以往的使用姿势，所有配置均放在配置中心，服务启动时会从配置中心拉取配置生成线程池对象放到 Spring 容器中，使用时直接从 Spring 容器中获取，对业务代码零侵入</li>\\n<li><strong>通知告警</strong>：提供多种报警维度（配置变更通知、活性报警、容量阈值报警、拒绝触发报警、任务执行或等待超时报警），已支持企业微信、钉钉、飞书、邮件报警，同时提供 SPI 接口可自定义扩展实现</li>\\n<li><strong>运行监控</strong>：定时采集线程池指标数据，支持通过 MicroMeter、JsonLog 日志输出、Endpoint 三种方式，可通过 SPI 接口自定义扩展实现</li>\\n<li><strong>任务增强</strong>：提供任务包装功能，实现 TaskWrapper 接口即可，如 MdcTaskWrapper、TtlTaskWrapper、SwTraceTaskWrapper，可以支持线程池上下文信息传递</li>\\n<li><strong>多配置中心支持</strong>：基于主流配置中心实现线程池参数动态调整，实时生效，已支持 Nacos、Apollo、Zookeeper、Consul、Etcd、Polaris、ServiceComb，同时也提供 SPI 接口可自定义扩展实现</li>\\n<li><strong>中间件线程池管理</strong>：集成管理常用第三方组件的线程池，已集成 Tomcat、Jetty、Undertow、Dubbo、RocketMq、Hystrix、Grpc、Motan、Okhttp3、Brpc、Tars、SofaRpc、RabbitMq 等组件的线程池管理（调参、监控报警）</li>\\n<li><strong>轻量简单</strong>：基于 SpringBoot 实现，引入 starter，接入只需简单 4 步就可完成，顺利 3 分钟搞定</li>\\n<li><strong>多模式</strong>：提供了增强线程池 DtpExecutor，IO 密集型场景使用的线程池 EagerDtpExecutor，调度线程池 ScheduledDtpExecutor，有序线程池 OrderedDtpExecutor，可以根据业务场景选择合适的线程池</li>\\n<li><strong>兼容性</strong>：JUC 普通线程池和 Spring 中的 ThreadPoolTaskExecutor 也可以被框架管理，@Bean 定义时加 @DynamicTp 注解即可</li>\\n<li><strong>可靠性</strong>：框架提供的线程池实现 Spring 生命周期方法，可以在 Spring 容器关闭前尽可能多的处理队列中的任务</li>\\n<li><strong>高可扩展</strong>：框架核心功能都提供 SPI 接口供用户自定义个性化实现（配置中心、配置文件解析、通知告警、监控数据采集、任务包装等等）</li>\\n<li><strong>线上大规模应用</strong>：参考美团线程池实践，美团内部已经有该理论成熟的应用经验</li>\\n</ul>"}');export{d as comp,y as data};
