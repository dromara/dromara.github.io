import{_ as n,o as s,c as a,f as t}from"./app-0f21919f.js";const e={},p=t(`<h2 id="plug-in-overview" tabindex="-1"><a class="header-anchor" href="#plug-in-overview" aria-hidden="true">#</a> Plug-in overview</h2><p>** Plug-in positioning **</p><p>The divide plug-in is an HTTP forward proxy plug-in, and all HTTP requests are load balanced by the plug-in (the specific load balancing policy is specified in the rule).</p><p>** Effective time **</p><p>When the rpcType of the request header is HTTP and the plug-in is enabled, it will match the rules according to the request parameters, and finally be handed over to the downstream plug-in for responsive proxy invocation.</p><h2 id="plug-in-processing-flow" tabindex="-1"><a class="header-anchor" href="#plug-in-processing-flow" aria-hidden="true">#</a> Plug-in processing flow</h2><ol><li>First, review the general process of the request processing plug-in (AbstractSoulPlugin # execute):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Get plugin data</span>
  	<span class="token class-name">String</span> pluginName <span class="token operator">=</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainPluginData</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pluginData <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pluginData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Obtain selector data</span>
      	<span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectors <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainSelectorData</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// Match selector</span>
        <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selectorData <span class="token operator">=</span> <span class="token function">matchSelector</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// Obtain rule data</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainRuleData</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// Match rule</span>
        <span class="token class-name">RuleData</span> rule<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">SelectorTypeEnum</span><span class="token punctuation">.</span><span class="token constant">FULL_FLOW</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//get last</span>
            rule <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rules<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            rule <span class="token operator">=</span> <span class="token function">matchRule</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// Execute custom processing</span>
        <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> selectorData<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token comment">// Continue executing plugin chain processing</span>
    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The AbstractSoulPlugin first matches the corresponding selector and rule, and then executes the custom processing of the plug-in if the match is passed.</p><ol start="2"><li>Take a look at the custom processing flow of the divide plug-in (DividePlugin # doExecute):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  	<span class="token comment">// Prepare rule handling object (internally holds: load balancing algorithm name, retry count, and timeout)</span>
    <span class="token keyword">final</span> <span class="token class-name">DivideRuleHandle</span> ruleHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DivideRuleHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// Get the list of available services for the selector</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList <span class="token operator">=</span> <span class="token class-name">UpstreamCacheManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findUpstreamListBySelectorId</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// Select the specific service instance IP to be distributed (load balancing)</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">=</span> <span class="token class-name">LoadBalanceUtils</span><span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getLoadBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//Set HTTP URL, timeout, and retry count</span>
    <span class="token class-name">String</span> domain <span class="token operator">=</span> <span class="token function">buildDomain</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> realURL <span class="token operator">=</span> <span class="token function">buildRealURL</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> soulContext<span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_URL</span><span class="token punctuation">,</span> realURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_TIME_OUT</span><span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_RETRY</span><span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// Continue executing downstream of the plugin chain</span>
    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The DividePlugin first obtains the list of available services corresponding to the selector, then performs load balancing to select the target server instance IP to be distributed, and finally sets the final URL, timeout time, and retry times for the downstream of the plug-in chain to process.</p><p>** Notice **</p><p>The divide plug-in itself is only responsible for selecting the server instance to be distributed according to the selector, rules, and load balancing strategy, and does not directly initiate an HTTP request to the back-end service.</p><h2 id="host-probe" tabindex="-1"><a class="header-anchor" href="#host-probe" aria-hidden="true">#</a> Host probe</h2><p>As mentioned above, divide needs to obtain the list of services. Take a look at the obtained implementation (UpstreamCacheManager # findUpstreamListBySelectorId):</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUpstreamListBySelectorId</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> selectorId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">UPSTREAM_MAP_TEMP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>selectorId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The list of surviving services is obtained internally through the UPSTREAM _ MAP _ TEMP.</p><p>Two hash tables are maintained within the Upstream Cache Manager:</p><ul><li><p>UPSTREAM_MAP：</p><p>The full service hash table is responsible for storing full upstream service information, where key is the selector ID, and value is the list of services using the same selector.</p></li><li><p>UPSTREAM_MAP_TEMP：</p><p>The temporary service hash table is responsible for storing the upstream service information of the activity, the key is the selector ID, and the value is the service list using the same selector.</p></li></ul><p>In the previous chapters, we mentioned that the submit method updates the UPSTREAM _ MAP and UPSTREAM _ MAP _ TEMP at the same time during data synchronization, but how to maintain the UPSTREAM _ MAP _ TEMP when the subsequent service is offline? Everything has to start with IP exploration.</p><h4 id="_3-1-opportunity-of-exploration" tabindex="-1"><a class="header-anchor" href="#_3-1-opportunity-of-exploration" aria-hidden="true">#</a> 3.1 Opportunity of exploration</h4><p>The time to explore is from the initialization of the Upstream Cache Manager:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">UpstreamCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Health check switch check</span>
  	<span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;soul.upstream.check&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// Start scheduled health check task</span>
        <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SoulThreadFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;scheduled-upstream-task&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">scheduled</span><span class="token punctuation">,</span>
                        <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;soul.upstream.scheduledTime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the Upstream Cache Manager is initialized, if the probe switch is turned on, the timed probe task will be created. Here, it is executed once every 30 seconds by default.</p><p>There are two configuration parameters involved here:</p><ul><li>Soul. Upstream. Check detection switch: default value is true, and if set to false, it means no detection</li><li>Soul. Upstream. ScheduledTime detection interval, 10 seconds by default</li></ul><h4 id="_3-2-exploration-mission" tabindex="-1"><a class="header-anchor" href="#_3-2-exploration-mission" aria-hidden="true">#</a> 3.2. Exploration mission</h4><ol><li>Next, let&#39;s look at the implementation of the probe task (Upstream Cache Manager # scheduled):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UPSTREAM_MAP</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">UPSTREAM_MAP</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
          	<span class="token comment">// Perform health check</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">UPSTREAM_MAP_TEMP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token constant">UPSTREAM_MAP_TEMP</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The task is responsible for traversing and registering the full service hash table one by one and checking the service activity:</p><ul><li>If the survival number is greater than 0, the survival service hash table is updated</li><li>Otherwise, removing the corresponding content of the survival service hash table</li></ul><ol start="2"><li>Continue to see the service list liveness check process (Upstream Cache Manager # check):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">:</span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Check service liveness</span>
      	<span class="token keyword">final</span> <span class="token keyword">boolean</span> pass <span class="token operator">=</span> <span class="token class-name">UpstreamCheckUtils</span><span class="token punctuation">.</span><span class="token function">checkUrl</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">.</span><span class="token function">getUpstreamUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token comment">// Update service status</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>divideUpstream<span class="token punctuation">.</span><span class="token function">isStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                divideUpstream<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                divideUpstream<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
          	<span class="token comment">// Record surviving services</span>
            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          	<span class="token comment">// Update service status</span>
            divideUpstream<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> resultList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is responsible for traversing the service list, checking the activity of each service according to the URL and registering the surviving services.</p><h4 id="_3-3-activity-check" tabindex="-1"><a class="header-anchor" href="#_3-3-activity-check" aria-hidden="true">#</a> 3.3 Activity check</h4><ol><li>Service liveness check implementation (Upstream CheckUtils # checkUrl):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUrl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// Check if the URL is in IP + port format</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIP</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// Process IP and port</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hostPort<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">HTTP</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> http <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&quot;\\\\/\\\\/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hostPort <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>http<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            hostPort <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      	<span class="token comment">// Test if the host can be connected</span>
        <span class="token keyword">return</span> <span class="token function">isHostConnector</span><span class="token punctuation">(</span>hostPort<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>hostPort<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token comment">// Test if the host is reachable</span>
        <span class="token keyword">return</span> <span class="token function">isHostReachable</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Check if the URL is in IP + port format:</p><ul><li>If it is in IP + port format, test whether the host can be connected</li><li>Otherwise, test whether the host is reachable</li></ul><ol start="2"><li>Test whether the host is connectable (Upstream CheckUtils # isHostConnector):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isHostConnector</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test IP connectivity through socket connection.</p><ol start="3"><li>Test whether the host is reachable (UpstreamCheckUtils # isHostReachable):</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isHostReachable</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> host<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isReachable</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Non IP + port format URL Try to use domain name format to test if the host is reachable.</p><p>On the whole, the server information that the divide plug-in gets from the cache comes from data synchronization and is updated regularly and actively by the probe task.</p><h2 id="load-balancing" tabindex="-1"><a class="header-anchor" href="#load-balancing" aria-hidden="true">#</a> Load balancing</h2><p>As mentioned above, divide selects the service IP for final distribution through the load balancing algorithm. Let&#39;s take a look at the implementation of load balancing (LoadBalan ceUtils # selector):</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DivideUpstream</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> algorithm<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LoadBalance</span> loadBalance <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">LoadBalance</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJoin</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> loadBalance<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Internally, the Extension Loader is used to implement the SPI mechanism, and then the corresponding load balancing algorithm is loaded through the algorithm name to execute the load balancing calculation and finally distribute to the service IP.</p><p>The soul gateway supports three load balancing strategies by default</p><ul><li>HASH (needs to be calculated, and there may be imbalance)</li><li>RANDOM (simplest and fastest, almost average under a large number of requests)</li><li>ROUND _ ROBIN (need to record the status, which has a certain impact, and there is not much difference in the results between random and polling under large data volume)</li></ul><p>The default is RANDOM random algorithm, and the algorithm processing is as follows (RandomLoadBalance # doSelect):</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DivideUpstream</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> totalWeight <span class="token operator">=</span> <span class="token function">calculateTotalWeight</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> sameWeight <span class="token operator">=</span> <span class="token function">isAllUpStreamSameWeight</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// If weights are inconsistent, randomize based on total weight</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalWeight <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sameWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">random</span><span class="token punctuation">(</span>totalWeight<span class="token punctuation">,</span> upstreamList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token comment">// Randomize based on the number of services</span>
    <span class="token keyword">return</span> <span class="token function">random</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Judging whether the weights of the services in the service list are consistent:</p><ul><li>If the weights are not consistent, they will be randomized according to the total weight</li><li>Otherwise, random by number of services</li></ul><p>Randomize details by total weight (RandomLoadBalance # random):</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">DivideUpstream</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> totalWeight<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Generate a random number based on the total weight</span>
    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token constant">RANDOM</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>totalWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Determine which segment the random value falls into</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">:</span> upstreamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        offset <span class="token operator">-=</span> <span class="token function">getWeight</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> divideUpstream<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> upstreamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sum-up" tabindex="-1"><a class="header-anchor" href="#sum-up" aria-hidden="true">#</a> Sum up</h2><p>Processing flow of divide plug-in:</p><ul><li><p>Get a list of available services</p><ul><li>The list of services originally came from <code>soul-admin</code> data synchronization</li><li>By default, the list of available services is actively updated every 30 seconds.</li></ul></li><li><p>Load balancing</p><ul><li>Load balancing algorithm for loading target by extension loader</li><li>Execute a specific balancing strategy</li><li>Returns a final selection of service information</li></ul></li><li><p>Set the URL information of the final service</p></li><li><p>To be processed downstream of the plug-in chain</p></li></ul>`,62),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","soul_source_learning_16_divide_sxj.html.vue"]]);export{k as default};
