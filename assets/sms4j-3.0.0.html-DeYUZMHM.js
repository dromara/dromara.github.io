import{_ as n,c as a,a as e,o as i}from"./app-Cd8Sn9KY.js";const l={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h2 id="🎉sms4j-3-0-0-版本震撼发布-短信重试-多方共用-负载均衡正式来袭-🎉" tabindex="-1"><a class="header-anchor" href="#🎉sms4j-3-0-0-版本震撼发布-短信重试-多方共用-负载均衡正式来袭-🎉"><span>🎉sms4j 3.0.0 版本震撼发布 短信重试，多方共用，负载均衡正式来袭 🎉</span></a></h2><p>在历经了数月的等待之后（主要作者在摸鱼，写得慢。。。。）sms4j 的 3.0 版本终于正式发布，本次版本为大版本更新，与 2.x 不兼容，但是本次更新是一个长期支持版本，并且带来了诸多的新特性，接下来我们一起来看看吧</p><h2 id="🚀-新特性" tabindex="-1"><a class="header-anchor" href="#🚀-新特性"><span>🚀 新特性</span></a></h2><ul><li>支持短信失败重试，可以自定义重试次数</li><li>支持单厂商多配置使用</li><li>支持接口类配置</li><li>支持自定义缓存来源</li><li>支持默认负载均衡形式，权重可自定义配置</li><li>支持邮件发送</li><li>支持邮箱监听</li><li>支持邮件发送失败自动重试</li><li>支持短信拦截</li></ul><h2 id="🏇-使用方式变更" tabindex="-1"><a class="header-anchor" href="#🏇-使用方式变更"><span>🏇 使用方式变更</span></a></h2><p>在 sms4j3.0 版本中，使用方式与先前的 2.X 有所不同，使用上不再依托 2.X 中的枚举，而是改为更加自由的自定义 key 标识</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> SmsBlend smsBlend = SmsFactory.getSmsBlend(&quot;在配置中定义的configId&quot;);</span></span>
<span class="line"><span> SmsResponse smsResponse = smsBlend.sendMessage(&quot;18888888888&quot;,&quot;123&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔧-配置方式变更" tabindex="-1"><a class="header-anchor" href="#🔧-配置方式变更"><span>🔧 配置方式变更</span></a></h2><p>在 3.0 版本中，去除了先前中的 JDBC 配置等形式，改为更加自由的接口类配置，同时保留了 yml 配置，项目更加轻量，使用更加自由方便</p><h4 id="yml-配置" tabindex="-1"><a class="header-anchor" href="#yml-配置"><span>yml 配置</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sms:</span></span>
<span class="line"><span>    # 标注从yml读取配置</span></span>
<span class="line"><span>    config-type: yaml</span></span>
<span class="line"><span>    blends:</span></span>
<span class="line"><span>      # 自定义的标识，也就是configId这里可以是任意值（最好不要是中文）</span></span>
<span class="line"><span>      tx1:</span></span>
<span class="line"><span>        #厂商标识，标定此配置是哪个厂商，详细请看厂商标识介绍部分</span></span>
<span class="line"><span>        supplier: tencent</span></span>
<span class="line"><span>        #您的accessKey</span></span>
<span class="line"><span>        access-key-id: 您的accessKey</span></span>
<span class="line"><span>        #您的accessKeySecret</span></span>
<span class="line"><span>        access-key-secret: 您的accessKeySecret</span></span>
<span class="line"><span>        #您的短信签名</span></span>
<span class="line"><span>        signature: 您的短信签名</span></span>
<span class="line"><span>        #模板ID 非必须配置，如果使用sendMessage的快速发送需此配置</span></span>
<span class="line"><span>        template-id: xxxxxxxx</span></span>
<span class="line"><span>        #您的sdkAppId</span></span>
<span class="line"><span>        sdk-app-id: 您的sdkAppId</span></span>
<span class="line"><span>        # 自定义的标识，也就是configId这里可以是任意值（最好不要是中文）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接口类配置" tabindex="-1"><a class="header-anchor" href="#接口类配置"><span>接口类配置</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>public class ReadConfig implements SmsReadConfig {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public BaseConfig getSupplierConfig(String configId) {</span></span>
<span class="line"><span>        UniConfig uniConfig = new UniConfig();</span></span>
<span class="line"><span>       //此处仅为示例，实际环境中，数据可以来自任意位置，</span></span>
<span class="line"><span>        return uniConfig;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;BaseConfig&gt; getSupplierConfigList() {</span></span>
<span class="line"><span>        //此处仅为示例，实际环境中，数据可以来自任意位置，</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class Demo {</span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    ReadConfig config;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @PostConstruct</span></span>
<span class="line"><span>    public void init(){</span></span>
<span class="line"><span>        // 创建SmsBlend 短信实例</span></span>
<span class="line"><span>        SmsFactory.createSmsBlend(config,&quot;在配置中定义的configId&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📧-邮件插件" tabindex="-1"><a class="header-anchor" href="#📧-邮件插件"><span>📧 邮件插件</span></a></h2><p>邮件插件在这次的更新中也得到了很大的优化，现在的邮件插件使用起来更加简单方便，同时可以覆盖多种场景，并且支持自定义 html 模板发送邮件</p><p>支持包括：</p><ul><li>html 模板邮件</li><li>携带多个附件的邮件</li><li>自动打包成 zip 的邮件</li><li>标准的文字邮件</li><li>抄送人</li><li>密送人</li><li>失败自动重试</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//以下仅做演示，实际使用需要填入数据</span></span>
<span class="line"><span>MailSmtpConfig config = MailSmtpConfig.builder.build;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//这里的key可以是任何可对比类型，用于后续从工厂取出邮件实现类用</span></span>
<span class="line"><span>MailFactory.put(&quot;qq&quot;,config)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MailClient mail = MailFactory.createMailClient(&quot;qq&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mail.send(message);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>邮件插件去除了先前版本中过多的重载方法，统一改为 send 方法进行发送，通过<code>MailMessage</code>构建不同的邮件</p><h2 id="📩-邮箱监听" tabindex="-1"><a class="header-anchor" href="#📩-邮箱监听"><span>📩 邮箱监听</span></a></h2><p>邮箱监听可以监听到某个 IMAP 协议邮箱中收到的邮件，并对其进行一定的处理。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MonitorFactory.put(&quot;自定义的标识&quot;,MailImapConfig配置,Monitor回调对象)</span></span>
<span class="line"><span>MonitorFactory.start(&quot;put中自定义的标识&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>邮箱监听开启后可以监听指定配置下的邮箱，并将收到的邮件进行自定义的处理</p><h2 id="🔨-问题修复" tabindex="-1"><a class="header-anchor" href="#🔨-问题修复"><span>🔨 问题修复</span></a></h2><p>本次版本中，还修复了 2.X 中存在的一些问题</p><ul><li>华为云短信在群发时签名错误</li><li>腾讯云短信在某些情况下导致的发送失败</li><li>unisms 的返回值存在异常</li><li>阿里云短信在某些极端情况下会出现签名错误</li><li>springUtil 与其他框架冲突</li><li>多租户某些状态下配置存在问题</li><li>邮件发送时 ssl 配置状态错误</li></ul>`,26)]))}const c=n(l,[["render",p],["__file","sms4j-3.0.0.html.vue"]]),r=JSON.parse('{"path":"/zh/news/sms4j-3.0.0.html","title":"sms4j 3.0.0版本震撼发布 短信重试，多方共用，负载均衡正式来袭","lang":"zh-CN","frontmatter":{"title":"sms4j 3.0.0版本震撼发布 短信重试，多方共用，负载均衡正式来袭","author":"sms4j","tag":["sms4j"],"date":"2023-09-18T00:00:00.000Z","cover":"/assets/img/news/sms4j-cover.png","head":[["meta",{"name":"新闻"}],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/news/sms4j-3.0.0.html"}],["meta",{"property":"og:title","content":"sms4j 3.0.0版本震撼发布 短信重试，多方共用，负载均衡正式来袭"}],["meta",{"property":"og:description","content":"🎉sms4j 3.0.0 版本震撼发布 短信重试，多方共用，负载均衡正式来袭 🎉 在历经了数月的等待之后（主要作者在摸鱼，写得慢。。。。）sms4j 的 3.0 版本终于正式发布，本次版本为大版本更新，与 2.x 不兼容，但是本次更新是一个长期支持版本，并且带来了诸多的新特性，接下来我们一起来看看吧 🚀 新特性 支持短信失败重试，可以自定义重试次..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/sms4j-cover.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T05:33:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/sms4j-cover.png"}],["meta",{"name":"twitter:image:alt","content":"sms4j 3.0.0版本震撼发布 短信重试，多方共用，负载均衡正式来袭"}],["meta",{"property":"article:author","content":"sms4j"}],["meta",{"property":"article:tag","content":"sms4j"}],["meta",{"property":"article:published_time","content":"2023-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T05:33:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sms4j 3.0.0版本震撼发布 短信重试，多方共用，负载均衡正式来袭\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/assets/img/news/sms4j-cover.png\\"],\\"datePublished\\":\\"2023-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T05:33:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sms4j\\"}]}"]],"description":"🎉sms4j 3.0.0 版本震撼发布 短信重试，多方共用，负载均衡正式来袭 🎉 在历经了数月的等待之后（主要作者在摸鱼，写得慢。。。。）sms4j 的 3.0 版本终于正式发布，本次版本为大版本更新，与 2.x 不兼容，但是本次更新是一个长期支持版本，并且带来了诸多的新特性，接下来我们一起来看看吧 🚀 新特性 支持短信失败重试，可以自定义重试次..."},"headers":[{"level":2,"title":"🎉sms4j 3.0.0 版本震撼发布 短信重试，多方共用，负载均衡正式来袭 🎉","slug":"🎉sms4j-3-0-0-版本震撼发布-短信重试-多方共用-负载均衡正式来袭-🎉","link":"#🎉sms4j-3-0-0-版本震撼发布-短信重试-多方共用-负载均衡正式来袭-🎉","children":[]},{"level":2,"title":"🚀 新特性","slug":"🚀-新特性","link":"#🚀-新特性","children":[]},{"level":2,"title":"🏇 使用方式变更","slug":"🏇-使用方式变更","link":"#🏇-使用方式变更","children":[]},{"level":2,"title":"🔧 配置方式变更","slug":"🔧-配置方式变更","link":"#🔧-配置方式变更","children":[]},{"level":2,"title":"📧 邮件插件","slug":"📧-邮件插件","link":"#📧-邮件插件","children":[]},{"level":2,"title":"📩 邮箱监听","slug":"📩-邮箱监听","link":"#📩-邮箱监听","children":[]},{"level":2,"title":"🔨 问题修复","slug":"🔨-问题修复","link":"#🔨-问题修复","children":[]}],"git":{"createdTime":1698039180000,"updatedTime":1698039180000,"contributors":[{"name":"Cici","username":"Cici","email":"1901177100@qq.com","commits":1,"url":"https://github.com/Cici"}]},"readingTime":{"minutes":3.5,"words":1051},"filePathRelative":"zh/news/sms4j-3.0.0.md","localizedDate":"2023年9月18日","autoDesc":true,"excerpt":"<h2>🎉sms4j 3.0.0 版本震撼发布 短信重试，多方共用，负载均衡正式来袭 🎉</h2>\\n<p>在历经了数月的等待之后（主要作者在摸鱼，写得慢。。。。）sms4j 的 3.0 版本终于正式发布，本次版本为大版本更新，与 2.x 不兼容，但是本次更新是一个长期支持版本，并且带来了诸多的新特性，接下来我们一起来看看吧</p>\\n<h2>🚀 新特性</h2>\\n<ul>\\n<li>支持短信失败重试，可以自定义重试次数</li>\\n<li>支持单厂商多配置使用</li>\\n<li>支持接口类配置</li>\\n<li>支持自定义缓存来源</li>\\n<li>支持默认负载均衡形式，权重可自定义配置</li>\\n<li>支持邮件发送</li>\\n<li>支持邮箱监听</li>\\n<li>支持邮件发送失败自动重试</li>\\n<li>支持短信拦截</li>\\n</ul>"}');export{c as comp,r as data};
