import{_ as n,a as s,b as a,c as t,d as e,e as p}from"./image-20210122172333111-6e19bd4c.js";import{_ as o,o as c,c as l,f as i}from"./app-9ea018c9.js";const u={},k=i('<blockquote><p>Fan Jinpeng</p></blockquote><h1 id="_1-previously-on" tabindex="-1"><a class="header-anchor" href="#_1-previously-on" aria-hidden="true">#</a> 1.Previously on</h1><p>In Part 4, we analyzed that after the HTTP user service system accesses the Soul gateway, it will call the registration interface of soul-admin, register all the interface information that needs to be proxied by the gateway to soul-admin, and finally, it will connect through the web socket. Synchronize the interface information received by soul-admin to Soul Gateway (soul-bootstrap). Today, we will continue to analyze how the data is synchronized to soul-bootstrap.</p><p>If you don&#39;t know the process, you can go out and turn left to see the fourth article.</p><h1 id="_2-soul-admin-and-soul-bootstrap-data-synchronization" tabindex="-1"><a class="header-anchor" href="#_2-soul-admin-and-soul-bootstrap-data-synchronization" aria-hidden="true">#</a> 2.Soul-admin and soul-bootstrap data synchronization</h1><p>In order to verify the data synchronization process, there is no need to start the business system. You can just start the soul-admin and soul-bootstrap systems. You can open or close the plug-in on the page to see how this process is implemented.</p><p>Link to the official website of data synchronization strategy</p><h2 id="_2-1-start-2-systems" tabindex="-1"><a class="header-anchor" href="#_2-1-start-2-systems" aria-hidden="true">#</a> 2.1 Start 2 systems</h2><p>They are all started by default according to the project, and no configuration files need to be modified.</p><h2 id="_2-2-page-operation-search-interface" tabindex="-1"><a class="header-anchor" href="#_2-2-page-operation-search-interface" aria-hidden="true">#</a> 2.2. Page operation search interface</h2><p>Start the divide plug-in here, F12, and see which interface soul-admin will be called in the foreground.</p><figure><img src="'+n+`" alt=" open_divide_plugin " tabindex="0"><figcaption> open_divide_plugin </figcaption></figure><p>You can see that the foreground sends a PUT request to the background: http://localhost:9095/plugin/5.</p><h2 id="_2-3-background-interface" tabindex="-1"><a class="header-anchor" href="#_2-3-background-interface" aria-hidden="true">#</a> 2.3 Background interface</h2><p>Search for this interface in the project</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// PluginController.java</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/plugin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginController</span> <span class="token punctuation">{</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token doc-comment comment">/**
     * update plugin.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">id</span>        primary key.
     * <span class="token keyword">@param</span> <span class="token parameter">pluginDTO</span> plugin.
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">SoulAdminResult</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">SoulAdminResult</span> <span class="token function">updatePlugin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token keyword">final</span> <span class="token class-name">PluginDTO</span> pluginDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>pluginDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pluginDTO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> result <span class="token operator">=</span> pluginService<span class="token punctuation">.</span><span class="token function">createOrUpdate</span><span class="token punctuation">(</span>pluginDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">SoulAdminResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">SoulAdminResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">SoulResultMessage</span><span class="token punctuation">.</span><span class="token constant">UPDATE_SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Into the implementation class.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// PluginServiceImpl.java</span>
<span class="token doc-comment comment">/**
     * create or update plugin.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">pluginDTO</span> <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">PluginDTO</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@return</span> rows
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createOrUpdate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginDTO</span> pluginDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token function">checkData</span><span class="token punctuation">(</span>pluginDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">PluginDO</span> pluginDO <span class="token operator">=</span> <span class="token class-name">PluginDO</span><span class="token punctuation">.</span><span class="token function">buildPluginDO</span><span class="token punctuation">(</span>pluginDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DataEventTypeEnum</span> eventType <span class="token operator">=</span> <span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">CREATE</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>pluginDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pluginMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>pluginDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            eventType <span class="token operator">=</span> <span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">;</span>
            pluginMapper<span class="token punctuation">.</span><span class="token function">updateSelective</span><span class="token punctuation">(</span>pluginDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// publish change event.</span>
        eventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangedEvent</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">PLUGIN</span><span class="token punctuation">,</span> eventType<span class="token punctuation">,</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token class-name">PluginTransfer</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">mapToData</span><span class="token punctuation">(</span>pluginDO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can be seen here that the first half is to operate the database and persist the relevant information; the second half is to publish an event.</p><h2 id="_2-4-publish-the-event" tabindex="-1"><a class="header-anchor" href="#_2-4-publish-the-event" aria-hidden="true">#</a> 2.4 Publish the event</h2><p>The event published here is encapsulated by DataChangedEvent, and there is an enumeration in it. There are many types here:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * configuration group.
 *
 * <span class="token keyword">@author</span> huangxiaofeng
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ConfigGroupEnum</span> <span class="token punctuation">{</span>

    <span class="token constant">APP_AUTH</span><span class="token punctuation">,</span>

    <span class="token constant">PLUGIN</span><span class="token punctuation">,</span>

    <span class="token constant">RULE</span><span class="token punctuation">,</span>

    <span class="token constant">SELECTOR</span><span class="token punctuation">,</span>

    <span class="token constant">META_DATA</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Seeing these types, if you still have an impression of the fourth article, you can see that the types of events sent at that time were SELECTOR and RULE, and now it is PLUGIN. Although the types are different, it does not affect us to continue to analyze the logic behind. Let&#39;s continue.</p><p>Another eventType is also an enumeration. There are five types: DELETE, CREATE, UPDATE, REFRESH, and MYSELF. In this case, it is UPDATE.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * The enum Data event type.
 *
 * <span class="token keyword">@author</span> xiaoyu
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DataEventTypeEnum</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * delete event.
     */</span>
    <span class="token constant">DELETE</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * insert event.
     */</span>
    <span class="token constant">CREATE</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * update event.
     */</span>
    <span class="token constant">UPDATE</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * REFRESH data event type enum.
     */</span>
    <span class="token constant">REFRESH</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * Myself data event type enum.
     */</span>
    <span class="token constant">MYSELF</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-listen-for-events" tabindex="-1"><a class="header-anchor" href="#_2-5-listen-for-events" aria-hidden="true">#</a> 2.5 Listen for events</h2><p>Locate the code that listens for events:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DataChangedEventDispatcher.java</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataChangedEventDispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataChangedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataChangedListener</span><span class="token punctuation">&gt;</span></span> listeners<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DataChangedEventDispatcher</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DataChangedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DataChangedListener</span> listener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">APP_AUTH</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onAppAuthChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">PLUGIN</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onPluginChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">RULE</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onRuleChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">SELECTOR</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onSelectorChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">META_DATA</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onMetaDataChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected value: &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataChangedListener</span><span class="token punctuation">&gt;</span></span> listenerBeans <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">DataChangedListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listenerBeans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-1-listener-injection" tabindex="-1"><a class="header-anchor" href="#_2-5-1-listener-injection" aria-hidden="true">#</a> 2.5.1 Listener injection</h3><p>You can see that the DataChangedEventDispatcher implements the InitializingBean interface, overrides the afterPropertiesSet method, and uses @ Component when Spring starts. This override method is called after the container is loaded. In the After PropertiesSet method, all the beans of the DataChangedListener type are obtained and placed in the class property listeners.</p><p>So the question is, when are these listeners injected into the container?</p><p>First look at the definition of the Data ChangedListener interface:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Event listener, used to send notification of event changes,
 * used to support HTTP, websocket, zookeeper and other event notifications.
 *
 * <span class="token keyword">@author</span> huangxiaofeng
 * <span class="token keyword">@author</span> xiaoyu
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DataChangedListener</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * invoke this method when AppAuth was received.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">changed</span>   the changed
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> the event type
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onAppAuthChanged</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * invoke this method when Plugin was received.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">changed</span>   the changed
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> the event type
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onPluginChanged</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * invoke this method when Selector was received.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">changed</span>   the changed
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> the event type
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onSelectorChanged</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * On meta data changed.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">changed</span>   the changed
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> the event type
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onMetaDataChanged</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * invoke this method when Rule was received.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">changed</span>   the changed
     * <span class="token keyword">@param</span> <span class="token parameter">eventType</span> the event type
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onRuleChanged</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can be seen that there are five methods defined in the interface, which respectively deal with the corresponding processing methods when the data changes of appAuth, plugin, selector, metaData and rule are monitored.</p><p>Its inheritance relationship:</p><figure><img src="`+s+`" alt=" DataChangedListener " tabindex="0"><figcaption> DataChangedListener </figcaption></figure><p>Because the websocket is used by default, the listener here corresponds to the Web socketData ChangedListener, Alt + F7, and the place where this class is instantiated is the following configuration class:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DataSyncConfiguration.java</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSyncConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * http long polling.
     */</span>
    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;soul.sync.http.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">HttpSyncProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpLongPollingListener</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">HttpLongPollingDataChangedListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">HttpLongPollingDataChangedListener</span> <span class="token function">httpLongPollingDataChangedListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpSyncProperties</span> httpSyncProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpLongPollingDataChangedListener</span><span class="token punctuation">(</span>httpSyncProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * The type Zookeeper listener.
     */</span>
    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;soul.sync.zookeeper&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">ZookeeperConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ZookeeperListener</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ZookeeperDataChangedListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">DataChangedListener</span> <span class="token function">zookeeperDataChangedListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ZkClient</span> zkClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZookeeperDataChangedListener</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ZookeeperDataInit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">ZookeeperDataInit</span> <span class="token function">zookeeperDataInit</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ZkClient</span> zkClient<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SyncDataService</span> syncDataService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZookeeperDataInit</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">,</span> syncDataService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * The type Nacos listener.
     */</span>
    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;soul.sync.nacos&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">NacosConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NacosListener</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">NacosDataChangedListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">DataChangedListener</span> <span class="token function">nacosDataChangedListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigService</span> configService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosDataChangedListener</span><span class="token punctuation">(</span>configService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * The WebsocketListener(default strategy).
     */</span>
    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;soul.sync.websocket.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">WebsocketSyncProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketListener</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebsocketDataChangedListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">DataChangedListener</span> <span class="token function">websocketDataChangedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebsocketDataChangedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">WebsocketCollector</span> <span class="token function">websocketCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebsocketCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are four data synchronization strategies: HTTP long polling, zookeeper, nacos, and websocket (default strategy).</p><p>See the web socket annotation @ ConditionalOnProperty (name = &quot;soul. Sync. Web socket. Enabled&quot;, having Value = &quot;true&quot;, Match (IfMissing = true), find the following configuration in the configuration file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">soul</span><span class="token punctuation">:</span>
  <span class="token key atrule">sync</span><span class="token punctuation">:</span>
    <span class="token key atrule">websocket</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is where the truth comes out.</p><p>If you do not want to use the default synchronization policy of the web socket, you can write the corresponding configuration in the configuration file.</p><h3 id="_2-5-2-listening-event-processing-logic" tabindex="-1"><a class="header-anchor" href="#_2-5-2-listening-event-processing-logic" aria-hidden="true">#</a> 2.5.2 Listening event processing logic</h3><p>In order to prevent you from turning back and looking at it, which is inconvenient, I will post the processing logic code here:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DataChangedEventDispatcher.java</span>
<span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DataChangedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DataChangedListener</span> listener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">APP_AUTH</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onAppAuthChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">PLUGIN</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onPluginChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">RULE</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onRuleChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">SELECTOR</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onSelectorChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">META_DATA</span><span class="token operator">:</span>
                    listener<span class="token punctuation">.</span><span class="token function">onMetaDataChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected value: &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All listeners are traversed here. For the current web socket, there is only one listener, and it is not known when the other multiple cases will appear. It is doubtful here, and we will come back to add (//TODO) when we encounter related cases later.</p><p>Different logics are used according to the type of the published event. The types here correspond to the methods defined in the DataChangedListener interface.</p><p>The listener here is an instance of the Web socketData ChangedListener, which will enter the corresponding method in the class:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// WebsocketDataChangedListener.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketDataChangedListener</span> <span class="token keyword">implements</span> <span class="token class-name">DataChangedListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPluginChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> pluginDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> websocketData <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">PLUGIN</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pluginDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSelectorChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectorDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> websocketData <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">SELECTOR</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> selectorDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRuleChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> ruleDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> configData <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ruleDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>configData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAppAuthChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> appAuthDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> configData <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appAuthDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>configData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMetaDataChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> metaDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> configData <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>configData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see in the code, the data is encapsulated as Web socketData and sent using the WebsocketController. Send method.</p><h2 id="_2-6-synchronize-data-to-soul-bootstrap" tabindex="-1"><a class="header-anchor" href="#_2-6-synchronize-data-to-soul-bootstrap" aria-hidden="true">#</a> 2.6 Synchronize data to soul-bootstrap</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// WebsocketCollector.java</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/websocket&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketCollector</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Session</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SESSION_SET</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SESSION_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;sessionKey&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * On open.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span> the session
     */</span>
    <span class="token annotation punctuation">@OnOpen</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;websocket on open successful....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">SESSION_SET</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * On message.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">message</span> the message
     * <span class="token keyword">@param</span> <span class="token parameter">session</span> the session
     */</span>
    <span class="token annotation punctuation">@OnMessage</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">ThreadLocalUtil</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">SESSION_KEY</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SpringBeanUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SyncDataService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">syncAll</span><span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token class-name">ThreadLocalUtil</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * On close.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span> the session
     */</span>
    <span class="token annotation punctuation">@OnClose</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">SESSION_SET</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadLocalUtil</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * On error.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span> the session
     * <span class="token keyword">@param</span> <span class="token parameter">error</span>   the error
     */</span>
    <span class="token annotation punctuation">@OnError</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">SESSION_SET</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadLocalUtil</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;websocket collection error: &quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Send.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">message</span> the message
     * <span class="token keyword">@param</span> <span class="token parameter">type</span>    the type
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Session</span> session <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Session</span><span class="token punctuation">)</span> <span class="token class-name">ThreadLocalUtil</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">SESSION_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;websocket send result is exception: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Session</span> session <span class="token operator">:</span> <span class="token constant">SESSION_SET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;websocket send result is exception: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Web socketController uses the @ ServerEndpoint ( &quot;/web socket&quot;) annotation, opens a web socket service interface, and waits for a connection.</p><p>After the soul-bootstrap is started, the web socket will be connected, and the onOpen method will be triggered to store the Session of this connection information in the Set set of the SESSION _ SET.</p><p>In the send method, it will first determine whether the DataEventTypeEnum type is MYSELF. This type can be traced back to 2.3-2.4. This time it is UPDATE. As for when it is MYSELF, it needs to be added later. It is doubtful here (//TODO).</p><p>The following for loop iterates through all the web socket connection sessions to send the change data.</p><p>At this point, the default web socket synchronization data strategy is clear.</p><blockquote><p>Zhu Ming</p></blockquote><h2 id="data-synchronization-between-background-and-gateway-web-socket" tabindex="-1"><a class="header-anchor" href="#data-synchronization-between-background-and-gateway-web-socket" aria-hidden="true">#</a> Data synchronization between background and gateway (Web socket)</h2><h3 id="how-to-establish-web-socket-in-the-background" tabindex="-1"><a class="header-anchor" href="#how-to-establish-web-socket-in-the-background" aria-hidden="true">#</a> How to establish Web socket? In the background?</h3><p><img src="`+a+`" alt="05"> Data SyncConfiguration: As the configuration factory of Spring Bean, various listeners can be constructed according to the configuration information. Including HTTP long polling mode, Zookeeper mode, Nacos mode, Web socket method.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSyncConfiguration</span> <span class="token punctuation">{</span>

  <span class="token comment">// In the configuration of the soul-admin project, use soul.sync.websocket.enabled to enable or disable WebSocket.</span>
  <span class="token annotation punctuation">@Configuration</span>
  <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;soul.sync.websocket.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">WebsocketSyncProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">WebsocketCollector</span> <span class="token function">websocketCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebsocketCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Web socketListener: As <code>DataSyncConfiguration</code> the internal class of, it is responsible for the initialization of the web socket listener. Web socket Collector: It monitors the websocket connection and receives information. Maintain all session sessions connected to the background, and provide <code>send()</code> methods to notify session information.</p><h3 id="how-does-the-gateway-set-up-a-web-socket" tabindex="-1"><a class="header-anchor" href="#how-does-the-gateway-set-up-a-web-socket" aria-hidden="true">#</a> How does the gateway set up a Web socket?</h3><figure><img src="`+t+`" alt="06" tabindex="0"><figcaption>06</figcaption></figure><p>Web socket SyncData Configuration: As the configuration factory of Spring Bean, it is the gateway&#39;s entrance to build Websocket communication. (An independent startup project <code>soul-spring-boot-starter-sync-data-websocket</code> is provided for the gateway to choose freely.)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">WebsocketSyncDataService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;soul.sync.websocket&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;urls&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketSyncDataConfiguration</span> <span class="token punctuation">{</span>

  <span class="token comment">// Collect all subscribers registered as Beans, such as PluginDataSubscriber, MetaDataSubscriber, AuthDataSubscriber</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">SyncDataService</span> <span class="token function">websocketSyncDataService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebsocketConfig</span><span class="token punctuation">&gt;</span></span> websocketConfig<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginDataSubscriber</span><span class="token punctuation">&gt;</span></span> pluginSubscriber<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> metaSubscribers<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> authSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;you use websocket sync soul data.......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebsocketSyncDataService</span><span class="token punctuation">(</span>websocketConfig<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">WebsocketConfig</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pluginSubscriber<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaSubscribers<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">emptyList</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authSubscribers<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">emptyList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// In the configuration of the soul-bootstrap project, use soul.sync.websocket to configure the backend path for establishing connections</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;soul.sync.websocket&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">WebsocketConfig</span> <span class="token function">websocketConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebsocketConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Web socket SyncData Service: Get all the registered beans <code>WebsocketConfig</code> and the various <code>DataSubscriber</code> subscribers, and build an implemented <code>WebsocketClient</code> <code>SoulWebsocketClient</code> list</p><p>SoulWeb socket Client: <code>Websocket</code> The communication class monitors the websocket connection and receives information. After receiving the information from the background, it will notify each subscriber.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SoulWebsocketClient</span> <span class="token keyword">extends</span> <span class="token class-name">WebSocketClient</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WebsocketDataHandler</span> websocketDataHandler<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WebsocketData</span> websocketData <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">WebsocketData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ConfigGroupEnum</span> groupEnum <span class="token operator">=</span> <span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token function">acquireByName</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">.</span><span class="token function">getGroupType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Determine the event type of data changes based on the incoming information, such as refresh, update, delete, etc.</span>
    <span class="token class-name">String</span> eventType <span class="token operator">=</span> websocketData<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    websocketDataHandler<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span>groupEnum<span class="token punctuation">,</span> json<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Web socketData Handler: Construct the data processing classes of various implementations <code>AbstractDataHandler</code> and cache them during initialization.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketDataHandler</span> <span class="token punctuation">{</span>

  <span class="token comment">// Cache all DataHandler data change handling classes</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">,</span> <span class="token class-name">DataHandler</span><span class="token punctuation">&gt;</span></span> <span class="token constant">ENUM_MAP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">WebsocketDataHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>
                              <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span>
                              <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">PLUGIN</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PluginDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">SELECTOR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SelectorDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RuleDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthDataHandler</span><span class="token punctuation">(</span>authDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MetaDataHandler</span><span class="token punctuation">(</span>metaDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigGroupEnum</span> type<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Call the corresponding DataHandler data processing class based on the data change event type</span>
    <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gateway-data-change-call-chain" tabindex="-1"><a class="header-anchor" href="#gateway-data-change-call-chain" aria-hidden="true">#</a> Gateway data change call chain</h3><p>After the entry class <code>SoulWebsocketClient</code> that implements Websocket communication receives the background communication, the <code>executor()</code> method called <code>WebsocketDataHandler</code> matches the information type, and calls the corresponding <code>DataHandler</code> <code>handler()</code> to process the information.</p><figure><img src="`+e+`" alt="07" tabindex="0"><figcaption>07</figcaption></figure><p>AbstractDataHandler: The implementation <code>handler()</code> method calls the corresponding event abstract method according to the type of the event (such as refresh, update, create, delete, etc.).</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDataHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">DataHandler</span> <span class="token punctuation">{</span>

  <span class="token comment">// Distribute to respective methods based on the data event type (eventType), these methods are implemented by subclasses since different types of metadata handlers have different ways of processing</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">DataEventTypeEnum</span> eventTypeEnum <span class="token operator">=</span> <span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token function">acquireByName</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>eventTypeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">REFRESH</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">MYSELF</span><span class="token operator">:</span>
          <span class="token function">doRefresh</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">UPDATE</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">CREATE</span><span class="token operator">:</span>
          <span class="token function">doUpdate</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">DELETE</span><span class="token operator">:</span>
          <span class="token function">doDelete</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>XXX DataHandler: This refers to each implementation class <code>AbstractDataHandler</code> of (such as <code>PluginDataHandler</code>), whose main function is to call its subscriber.</p><p>Different <code>DataHandler</code> calls have different subscription methods:</p><ul><li>Notification of plug-in metadata changes <code>PluginDataHandler</code> is called <code>onSubscribe()</code></li><li>The notification selector is <code>SelectorDataHandler</code> called <code>onSelectorSubscribe()</code> to change the metadata</li><li>Notification rule metadata change <code>RuleDataHandler</code> is invoked <code>onRuleSubscribe()</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginDataHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDataHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Call onSubscribe() of the subscriber, sending the PluginData data object</span>
    dataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token operator">::</span><span class="token function">onSubscribe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CommonPluginData Subscriber: The <code>onSubscribe()</code> method of the subscriber notifies all classes injected as beans <code>PluginDataHandler</code> (not to be confused with the previous class of the same name, which is <code>soul-plugin-base</code> the interface under. Its implementation classes are in the respective pluggable plug-in packages.</p><figure><img src="`+p+`" alt=" image-20210122172333111 " tabindex="0"><figcaption> image-20210122172333111 </figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonPluginDataSubscriber</span> <span class="token keyword">implements</span> <span class="token class-name">PluginDataSubscriber</span> <span class="token punctuation">{</span>

  <span class="token comment">// Collect and cache all registered data handlers, such as DividePluginDataHandler under the HTTP plugin divide</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">PluginDataHandler</span><span class="token punctuation">&gt;</span></span> handlerMap<span class="token punctuation">;</span>

  <span class="token comment">// Called for plugin metadata changes</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cachePluginData</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>handler <span class="token operator">-&gt;</span> handler<span class="token punctuation">.</span><span class="token function">handlerPlugin</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Called for selector metadata changes</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSelectorSubscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selectorData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheSelectData</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">.</span><span class="token function">getPluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>handler <span class="token operator">-&gt;</span> handler<span class="token punctuation">.</span><span class="token function">handlerSelector</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Called for rule metadata changes</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRuleSubscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">RuleData</span> ruleData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BaseDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheRuleData</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">.</span><span class="token function">getPluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>handler <span class="token operator">-&gt;</span> handler<span class="token punctuation">.</span><span class="token function">handlerRule</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> TIPS</h3><p>There are two classes PluginDataHandler with the same name under the whole project. One <code>soul-sync-data-websocket</code> of them is under the project, which is used to notify the plug-in metadata change, and the other is under the <code>soul-plugin-base</code> project, which is used to define the metadata update of each type of plug-in.</p><p>To summarize the naming meaning of these two classes, ** <code>soul-sync-data-websocket</code> the &quot;plugin&quot; in the lower class name means that the type of metadata is a plug-in class, and <code>soul-plugin-base</code> the &quot;plugin&quot; in the lower class name means that the subclass that inherits it comes from each pluggable plug-in. Such as divide, dubbo plugins, etc. **</p>`,88),r=[k];function d(v,m){return c(),l("div",null,r)}const h=o(u,[["render",d],["__file","soul_source_learning_10_websocket.html.vue"]]);export{h as default};
